<?php
// @TODO; implement entity
// hook_entity_info etc..

// load search info and hooks
module_load_include('inc', 'ting_openformat','ting_openformat.search');
module_load_include('inc', 'ting_openformat' ,'ting_openformat.field');

/**
 * Implements hook_form_FORMID_alter (ting_client_admin_webservices_settings @see ting_client.admin.inc).
 * make openformat a dropdownlist.
 * add bibliotekdkWorkDisplay to ting_admin form
 */
function ting_openformat_form_ting_client_admin_webservices_settings_alter (&$form, &$form_state) {
  if( isset ( $form['webservices']['ting_search_openformat']  ) ) {
    $dkabm = $form['webservices']['ting_search_openformat']['#default_value'];
    $element = &$form['webservices']['ting_search_openformat'];
    // change type to select
    $element['#type'] = 'select';
    // set the original option (dkabm)
    $element['#options']['dkabm'] = 'dkabm';
    // add bibliotekdkWorkDisplay to options
    $element['#options']['bibliotekdkWorkDisplay'] = 'bibliotekdkWorkDisplay';
    // set default value
    //$form['webservices']['ting_search_openformat']['#default_value'] = 'bibliotekdkWorkDisplay';
  }
}
/*
Implements hook_ding_entity_buttons
 */
function ting_openformat_ding_entity_buttons($type, $entity) {
 return array(
      array(
        '#prefix' => '<p class="ding-entity-button">',
        '#suffix' => '</p>',
        '#type' => 'markup',
        '#markup' => 'ZEBRA',
      ),
    );

}


/************** ENTITY ****************/

/** @TODO make this work
 * Implements hook_entity_info
 * define a new entity
 **/

function ting_openformat_entity_info() {
  $return = array(
    'bibdkManifestation' => array(
      'label' => t('openformat manifestation'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',

      // make this a ding_entity ?
      'ding_entity_type' => 'bibdk_manifestation',
      //'ding_entity_type' => 'ting_openformat_manifestation',
      'ding_entity_menu' => '/manifestation/%ting_manifestation',
      'ding_entity_index' => 2,
      // 'ding_entity_bundle' => 'bibdk_entity',

      // uri callback
      //'uri callback' => 'ting_openformat_maniobject_uri',

      /* for clarity. default implementation of load hook */
      // 'load hook' => 'manifestation_load',
      'description' => t('openformat fields'),
      // leave controller class blank for now (use DrupalDefaultEntityController) @TODO implement
      'controller class' => 'ManifestionEntityAPIController',
      'entity keys' => array(
        //'id' => 'tid',
        //'ding_entity_id' => 'ding_entity_id',
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestation' => array(
          'label' => 'openformat manifestation',
          'admin' => array(
            'path' => 'admin/structure/manifestations',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),


      'bibdkWorkEntity' => array(
        'label' => t('Bibdk entity placeholder for manifestations'),
        'fieldable' => TRUE,
        // ?? do we need the base table -- it is not used for anything since controllerclass
        // only implements DrupalEntityControllerInterface and not DrupalDefaultEntityController
        'base table' => 'ting_openformat_manifestation',
        // make this a ding_entity ?
        'ding_entity_type' => 'bibdk_entity',
        //'ding_entity_type' => 'ting_openformat_manifestation',
        'ding_entity_menu' => '/manifestation/%ting_manifestation',
        'ding_entity_index' => 2,
        //... could an additional argument be used in ding_entity ?? maybe for setting bundels
        // 'ding_entity_bundle' => 'bibdk_entity',
        'controller class' => 'bibdkEntityAPIController',
        'load hook' => 'manifestations_load',
        'entity keys' => array(
          //'id' => 'tid',
          //'ding_entity_id' => 'ding_entity_id',
          'id' => 'ding_entity_id',
        ),
        'bundles' => array(
          'bibdkWorkEntity' => array(
            'label' => 'bibdkWorkEntity',
            'admin' => array(
              'path' => 'admin/structure/bibdkWork',
              'access arguments' => array('administer content types'),
            ),
          ),
        ),
      )


  );

  return $return;
}

/**
 * Load hook as set in entity_info
 * load hook is not currently used .. maybe later.
 */
function ting_openformat_manifestations_load($stdObjects) {
  $ret = array();
  return $ret;
}

/**
 * uri callback as defined in hook_entity_info
 **/
function ting_openformat_maniobject_uri() {
  return 'HEST';
}

/**************** end ENTITY ***************/

/***********  panel-pages ****************/

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_openformat_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function ting_openformat_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**************** end panel-pages ***************/

/** Implements hook_ding_devel_timers
 */
function ting_openformat_ding_devel_timers() {
  return array(
    'search_client' => array(
      'title' => 'Search client total request time was @time ms.',
    ),
    'search_client_net' => array(
      'title' => 'Search client net time was @time ms.',

      'include in total' => FALSE,
    ));
}


/************* VIEWS **************/

// @TODO - does this method belong here ??

function ting_openformat_work_view($object, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language; }

  $args = array();
  $content = array();

  field_attach_prepare_view('bibdkWorkEntity', array($object->ding_entity_id => $object), $view_mode, $langcode);
  entity_prepare_view('bibdkWorkEntity', array($object->id => $object), $langcode);
  $content += field_attach_view('bibdkWorkEntity', $object, $view_mode, $langcode);

  $args['work'] = $content;
  $content = array();

  foreach($object->manifestations as $id=>$manifestation){
    field_attach_prepare_view('bibdkManifestation', array( $id => $manifestation), $view_mode, $langcode);
    entity_prepare_view('bibdkManifestation', array($id => $manifestation), $langcode);
    $content = field_attach_view('bibdkManifestation', $manifestation, $view_mode, $langcode);
    // prepare for theme('item_list' ...
    $items[] = array('data' => drupal_render($content));
  }

  $args['manifestations'] = $items;

  return theme('ting_openformat_search_results',$args);
}



/*********** END VIEWS ***********/


/******************* ADMIN *****************/

/**
 * Impelments hook_flush_caches
 **/

function ting_openformat_flush_caches() {
  return array('cache_bibdk_webservices');
}

/*** FACETBROWSER ****/

/**
 * Implements hook_ding_facetbrowser().
 * initialize facetbrowser
 */
function ting_openformat_ding_facetbrowser() {
  $results             = new stdClass();
  $results->show_empty = FALSE;
  $search_result       = drupal_static('ting_search_results');
  if ($search_result) {
    $results->facets     = ($search_result instanceof TingClientSearchResult) ? $search_result->facets : array();
    $results->searchkey  = $search_result->search_key;
    return $results;
  }
}


/**
 * Implements hook_menu_alter().
 *
 * add menu item on admin/structure .. maybe this can be done via EntityDefaultUIController -- @see entity module
 *
 * Adjusts the menu so that the field subtab becomes the default local task,
 * to avoid having an useless placeholder page.
 */
function ting_openformat_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    if (isset($items['admin/structure/bibdkWork/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = &$items['admin/structure/bibdkWork'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Work entity for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/bibdkWork/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/manifestations/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/manifestations'] = $items['admin/structure/manifestations/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = &$items['admin/structure/manifestations'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'manifestations for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/manifestations/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
  }
}



