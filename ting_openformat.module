<?php

/**
 * Define constant cql operators
 */
define('CQL_AND', ' and ');
define('CQL_OR', ' or ');
define('CQL_NOT', ' not ');

// load search info and hooks
include_once 'ting_openformat.search.inc';
include_once 'ting_openformat.field_definitions.inc';
include_once 'ting_openformat.field.inc';
include_once 'ting_openformat_feeds.inc';
include_once 'ting_openformat.facetbrowser.inc';
include_once 'ting_openformat.view.inc';

function ting_openformat_menu() {
  $items = array();
  $items['work/%'] = array(
    'title' => 'Single work',
    'description' => 'View single work',
    'page arguments' => array(1),
    'page callback' => 'ting_openformat_single',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['ajax/load_more_results'] = array(
    'title' => 'Load more results AJAX callback',
    'description' => 'AJAX callback for ting_openformat_load_more_results. Loads X number of searchresults and returns the result to the client as JSON.',
    'access arguments' => array('access content'),
    'page callback' => 'ting_openformat_load_more_results_ajax_callback',
    'file' => 'ting_openformat_load_more.inc',
    'file path' => drupal_get_path('module', 'ting_openformat') . '/plugins/content_types/',
    'type' => MENU_CALLBACK,
  );

  $items['ting_openformat/full_view'] = array(
    'title' => 'Full view callback',
    'description' => 'Callback for full view button',
    'page callback' => 'ting_openformat_load_full_view',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ting_openformat/ajax/manifestations'] = array(
    'title' => 'Single work',
    'description' => 'View single work',
    'page arguments' => array(1),
    'page callback' => 'ting_openformat_ajax_manifestations',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/ting'] = array(
    'title' => 'Openformat',
    'description' => 'Handle ting_openformat module (disable)',
    'position' => 'left',
    'weight' => 1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ting_openformat'] = array(
    'title' => 'Openformat',
    'description' => 'Handle ting_openformat module (disable)',
    'position' => 'left',
    'weight' => 1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ting/disable'] = array(
    'title' => 'Disable this module',
    'description' => 'Delete virtual fields from this module and disable it',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_openformat_admin_module_disable'),
    'access arguments' => array('administer webservices settings'),
    'file' => 'ting_openformat.admin.inc'
  );
  //@todo remove order methods - they are not in use
  $items['admin/config/ting/order'] = array(
    'title' => 'Set Type Order',
    'description' => 'Set the order of the different types in a subwork',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_openformat_type_order_form'),
    'access arguments' => array('administer webservices settings'),
    'file' => 'ting_openformat.admin.inc'
  );
/*
  $items['ting_openformat/ajax/facets'] = array(
    'title' => 'facets',
    'description' => 'Get facets by ajax',
    'page callback' => 'ting_openformat_facets_by_ajax',
    'access arguments' => array('access content'),
  );
*/
  return $items;
}

/**
 * Implements hook_bibdk_usersettings_user_tabs
 * @return array
 */
function ting_openformat_bibdk_usersettings_user_tabs() {
  $tab['view'] = array(
    'title' => t('view'),
    'description' => t('usersettings_tab_view_description'),
    'weight' => 10,
  );

  return $tab;
}

/**
 * Implements hook_bibdk_usersettings_user_settings
 * @return array
 */
function ting_openformat_bibdk_usersettings_user_settings() {

  $form['view']['ting_openformat_fullview_usersetting'] = array(
    '#type' => 'checkbox',
    '#title' => t('Prefer full view'),
    '#default_value' => bibdk_usersettings_user_settings_get('ting_openformat_fullview_usersetting', FALSE),
  );

  $form['view'] += array(
    '#type' => 'container',
    '#weight' => 0,
    '#tab' => 'view',
  );

  return $form;
}

/** Implements hook_language_switch_links_alter. Add query parameters to link
 * to keep search result when switching language on search page
 * @param array $links
 * @param $type
 * @param $path
 */
function ting_openformat_language_switch_links_alter(array &$links, $type, $path) {
  // Get query parameters
  $query = drupal_get_query_parameters();
  foreach (
    $links as &$link) {
    $link['query'] = $query;
  }
}

/**
 * AJAX callback for full_view.
 * full_view comes as a POST paramter to avoid the parameter being present in the URL
 */
function ting_openformat_load_full_view() {
  $_SESSION['search_settings']['full_view'] = isset($_POST['full_view']) ? (bool) $_POST['full_view'] : FALSE;
  drupal_json_output(drupal_json_encode('success'));
}

/** Load manifestations and insert into placeholder via AJAX
 * @param $type
 * @param $json json encoded manifestation ids
 * @return json|false
 */
function ting_openformat_ajax_manifestations($type, $json) {
  $commands = array();
  $manifestation_ids = json_decode($json);

  if (!is_array($manifestation_ids) || count($manifestation_ids) == 0) {
    return FALSE;
  }

  $bibdkEntity = ting_openformat_get_manifestations($manifestation_ids);

  if (!isset($bibdkEntity) || count($bibdkEntity) == 0) {
    return FALSE;
  }

  $bibdkEntity = reset($bibdkEntity);
  $manifestations = $bibdkEntity->manifestations;

  if (!isset($manifestations) || count($manifestations) == 0) {
    return FALSE;
  }

  foreach ($manifestations as $manifestation) {
    $view = drupal_render(ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL));
    $commands[] = array(
      'command' => 'add_manifestations',
      'selector' => str_replace(':', '', '#' . $manifestation->id) ,
      'data' => $view,
    );
    
  }
  ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
}

/**
 * View single work
 *
 * invoked by menu hook displaying single manifestation as a work
 */
function ting_openformat_single($id) {
  drupal_set_title('');
  $bibdkEntity = ting_openformat_get_manifestations($id);
  if (!isset($bibdkEntity) || count($bibdkEntity) == 0) {
    return t('no_work_found');
  }
  $bibdkEntity = reset($bibdkEntity);
  $manifestation = reset($bibdkEntity->manifestations);

  $host_publication = $manifestation->getHostPublication();

  $part_of = NULL;
  if (isset($host_publication)) {
    $markup = _ting_openformat_get_markup_for_field($host_publication);
    $part_of = drupal_render($markup);
  }

  $creator = _ting_openformat_get_markup_for_field($bibdkEntity->getCreator());

  $creatorDisplay = $bibdkEntity->getCreatorDisplay();
  $title = !empty($creatorDisplay) ? $bibdkEntity->getTitle() . ' - ' . $creatorDisplay : $bibdkEntity->getTitle();

  drupal_set_title($title);

  $abstract = _ting_openformat_parse_element($bibdkEntity->getAbstract());

  $meta_description = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'description',
        'content' => $abstract,
    )
  );
  drupal_add_html_head( $meta_description, 'meta_description' );

  return array(
    '#theme' => 'ting_openformat_collection',
    '#title' => $bibdkEntity->getTitle(),
    '#partOf' => $part_of,
    '#author' => drupal_render($creator),
    '#uid' => $id,
    '#work' => ting_openformat_work_view($bibdkEntity),
    '#theme_attributes' => array(
      'class' => array('work', 'is-toggled', 'single'),
      'id' => $id,
    ),
  );
}

/** implements hook_preprocess_page()
 * - Remove content region if no results
 * - Remove H1 title from work pages
 *
 * @param $variables
 */
function ting_openformat_preprocess_page(&$variables) {
  if (in_array('page__search__work', $variables['theme_hook_suggestions'])) {
    $search_result = drupal_static('ting_search_results');
    if (!isset($search_result) || $search_result->numTotalObjects == 0) {
      unset($variables['page']['content']);
    }
  }
  else if ($variables['theme_hook_suggestions'][0] == 'page__work') {
    $variables['title'] = FALSE;
  }
}

/**
 * @param array $ids
 * @param array $params
 * @return array
 */
function ting_openformat_get_manifestations($ids, $params = array()) {
  $client = new ting_client_class();
  $default_params['objectFormat'] = variable_get('ting_search_openformat', 'bibliotekdkWorkDisplay');
  $default_params['objectId'] = $ids;
  $default_params['includeHoldingsCount'] = TRUE;
  drupal_alter('ting_openformat_getobject_params', $default_params);
  $params += $default_params;
  $result = $client->do_request('object', $params);

  if (empty($result->collections)) {
    return array();
  }
  else {
    return ting_openformat_pre_parse_manifestations($result);
  }
}

/**
 * @param stdClass $result
 * @return mixed
 */
function ting_openformat_pre_parse_manifestations($result) {
  $openformat = array();

  /* @var $TingClientObjectCollection TingClientObjectCollection */
  foreach ($result->collections as $TingClientObjectCollection) {
    /* @var $formattedCollection TingClientFormattedCollection */
    $formattedCollection = $TingClientObjectCollection->getFormattedCollection();

    if (is_a($formattedCollection, 'TingClientFormattedCollection')) {
      $manifestation = $formattedCollection->getWorkDisplay()->manifestation;
    }
    else {
      watchdog('ting_openformat', 'Expected object of type TingClientFormattedCollection - got %type', array('%type' => gettype($formattedCollection)), WATCHDOG_ERROR);
    }

    /* @var $TingClientObject TingClientObject */
    foreach ($TingClientObjectCollection->getObjects() as $TingClientObject) {
      $relationsData = isset($TingClientObject->relationsData) ? $TingClientObject->relationsData : NULL;
    }
    if (isset($relationsData)) {
      $manifestation->relationsData = $relationsData;
    }
    $openformat[] = $manifestation;
  }

  $entity = _ting_openformat_get_bibdk_work_entity($openformat);

  return $entity;
}

/**
 * @param $openformat
 * @return mixed
 */
function _ting_openformat_get_bibdk_work_entity($openformat) {
  $original_manifestations = array();
  $entity_ids = array();
  _ting_openformat_parse_manifestations($original_manifestations, $entity_ids, $openformat);
  $conditions['manifestations'] = $original_manifestations;

  return entity_load('bibdkWorkEntity', $entity_ids, $conditions, TRUE);
}

/**
 * Get a single manifestation from a pid
 *
 * @param $pid
 * @return Manifestation
 */
function ting_openformat_get_single_manifestation($pid) {
  /* @var $work BibdkWork */
  $pid_array = ting_openformat_get_single($pid);
  $work = reset($pid_array);
  $manifestation = reset($work->getManifestations());
  return $manifestation;
}

/**
 * @param $id
 * @return null|string
 */
function ting_openformat_get_single($id) {
  $params = array();
  $params['objectId'] = $id;
  $params['objectFormat'] = variable_get('ting_search_openformat', 'bibliotekdkWorkDisplay');
  $params['includeHoldingsCount'] = TRUE;
  $params['relationData'] = 'uri';

  $client = new ting_client_class();
  $result = $client->do_request('object', $params);

  if (isset($result->collections) && count($result->collections) > 0) {
    /* @var $collection TingClientObjectCollection */
    $collection = $result->collections[0];
    $openformat[] = $collection->getFormattedCollection()->getWorkDisplay()->manifestation;
  }

  if (empty($openformat)) {
    return t("work with id $id could not be found");
  }

  $original_manifestations = array();
  $entity_ids = array();
  _ting_openformat_parse_manifestations($original_manifestations, $entity_ids, $openformat);

  // conditions array is deprecated in drupal 8.
  $conditions['manifestations'] = $original_manifestations;

  $entity = entity_load('bibdkWorkEntity', $entity_ids, $conditions, TRUE);

  return $entity;
}

function _ting_openformat_parse_manifestations(&$original_manifestations, &$entity_ids, $openformat) {
  if (isset($openformat) && is_array($openformat) && !empty($openformat)) {
    foreach ($openformat as $manifestation) {
      $manifestation_id = isset($manifestation->adminData->pid->{'$'}) ? $manifestation->adminData->pid->{'$'} : NULL;
      $entity_ids[] = $manifestation_id;
      $original_manifestations[$manifestation_id] = $manifestation;
    }
  }
}

function ting_openformat_form_search_block_form_alter(&$form, &$form_state, $form_id) { // rebuild
  $form['search_block_form']['#default_value'] = drupal_static('ting_search_query');
}

/**
 * Implements hook_form_FORMID_alter (ting_client_admin_webservices_settings
 *
 * @see ting_client.admin.inc).
 * make openformat a dropdownlist.
 * add bibliotekdkWorkDisplay to ting_admin form
 */
function ting_openformat_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state) {
  if (isset($form['webservices']['ting_search_openformat'])) {
    $dkabm = $form['webservices']['ting_search_openformat']['#default_value'];
    $element = & $form['webservices']['ting_search_openformat'];
    // change type to select
    $element['#type'] = 'select';
    // set the original option (dkabm)
    $element['#options']['dkabm'] = 'dkabm';
    // add bibliotekdkWorkDisplay to options
    $element['#options']['bibliotekdkWorkDisplay'] = 'bibliotekdkWorkDisplay';
  }
}

/**
 * uri callback as defined in hook_entity_info
 * */
function ting_openformat_maniobject_uri() {
  return 'Brønd';
}

/* * *********  panel-pages *************** */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_openformat_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function ting_openformat_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/* * ************** end panel-pages ************** */

/** Implements hook_ding_devel_timers
 */
function ting_openformat_ding_devel_timers() {
  return array(
    'search_client' => array(
      'title' => 'Search client total request time was @time ms.',
    ),
    'search_client_net' => array(
      'title' => 'Search client net time was @time ms.',
      'include in total' => FALSE,
    )
  );
}

/**
 * Set tracking parameter in url. If trackingId is already set
 * append gui specific track. Else create tracking id for webservices.
 *
 * trackingid := $_GET['ẗrackingId'] . ':' . [number of collection on page]
 *
 * @TODO add a timestamp?
 *
 * @staticvar string $trackingId
 * @staticvar int $collectionCount
 * @return string
 */
function ting_openformat_set_tracking_id() {
  static $trackingId;
  static $collectionCount;

  if (!isset($trackingId)) {
    if (isset($_GET['trackingId'])) {
      $trackingId = $_GET['trackingId'];
    }
    else {
      $trackingId = '';
    }
  }

  if (!isset($collectionCount)) {
    $collectionCount = 0;
  }
  $collectionCount++;

  $trackId = $trackingId;
  if (strlen($trackId) > 1) {
    $trackId .= ':';
  }

  $trackId .= 'bibdkGui_' . $collectionCount;

  return $trackId;
}

/* * ***************** ADMIN **************** */

/**
 * Impelments hook_flush_caches
 * */
function ting_openformat_flush_caches() {
  return array('cache_bibdk_webservices');
}


/**
 * Implements hook_menu_alter().
 *
 * add menu item on admin/structure .. maybe this can be done via EntityDefaultUIController --
 *
 * @see entity module
 *
 * Adjusts the menu so that the field subtab becomes the default local task,
 * to avoid having an useless placeholder page.
 */
function ting_openformat_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    if (isset($items['admin/structure/bibdkWork/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/bibdkWork'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Work entity for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/bibdkWork/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/manifestations/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/manifestations'] = $items['admin/structure/manifestations/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/manifestations'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'manifestations for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/manifestations/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/subworks/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/subworks'] = $items['admin/structure/subworks/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/subworks'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Subworks for bibliotek.dk';
      $item['description'] = 'Manage subwork display.';

      $items['admin/structure/subworks/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/collection/fields'])) {
      $items['admin/structure/collection'] = $items['admin/structure/collection/fields'];
      $item = & $items['admin/structure/collection'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Collections for bibliotek.dk';
      $item['description'] = 'Manage collection display.';

      $items['admin/structure/collection/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 3,
      );
    }
    if (isset($items['admin/structure/manifestation/volume/fields'])) {
      $items['admin/structure/manifestation/volume'] = $items['admin/structure/manifestation/volume/fields'];
      $item = & $items['admin/structure/manifestation/volume'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Manifestation Volume for bibliotek.dk';
      $item['description'] = 'Manage Volume display.';

      $items['admin/structure/manifestation/volume/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 2,
      );
    }
    if (isset($items['admin/structure/manifestation/section/fields'])) {
      $items['admin/structure/manifestation/section'] = $items['admin/structure/manifestation/section/fields'];
      $item = & $items['admin/structure/manifestation/section'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Manifestation Section for bibliotek.dk';
      $item['description'] = 'Manage Section display.';

      $items['admin/structure/manifestation/section/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
  }
}

/**
 * Fetch known types from the datawell.
 */
function _ting_openformat_fetch_types() {
  $types = variable_get('ting_openformat_types', array());

  $options = array(
    'facets' => array('facet.type'),
    'numFacets' => 99,
    'reply_only' => TRUE,
    'sort' => 'random',
    'query' => "*=*",
    'start' => 0,
    'numResults' => 0,
    'agency' => variable_get('ting_agency'),
    'objectFormat' => variable_get('ting_search_openformat', 'dkabm'),
    'profile' => variable_get('ting_search_profile', FALSE)
  );

  $client = new ting_client_class();
  $result = $client->do_request('search', $options);

  foreach ($result->facets['facet.type']->terms as $term => $count) {
    if (!isset($types[$term])) {
      $types[$term] = array(
        "type" => $term,
        "count" => $count,
        "weight" => 1000
      );
    }
  }

  // Only save if we actually got any types.
  if (!empty($types)) {
    variable_set('ting_openformat_types', $types);
  }
}

/*************** ENTITY *****************/
/**
 * Implements hook_entity_info
 * for bibdk we need 3 entities: work, subwork and manifestation
 **/
function ting_openformat_entity_info() {
  $return = array(
    'bibdkManifestation' => array(
      'label' => t('openformat manifestation'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation',
      'description' => t('openformat fields'),
      'controller class' => 'ManifestionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestation' => array(
          'label' => 'openformat manifestation',
          'admin' => array(
            'path' => 'admin/structure/manifestations',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => TRUE,
        ),
        'reservation' => array(
          'label' => t('Reservation'),
          'custom settings' => TRUE,
        ),
      ),
    ),
    'bibdkManifestationVolume' => array(
      'label' => t('Manifestation Volume'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation_volume',
      'description' => t('Manifestation volume fields'),
      'controller class' => 'ManifestationVolumeEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestationVolume' => array(
          'label' => 'Manifestation volume fields',
          'admin' => array(
            'path' => 'admin/structure/manifestation/volume',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkManifestationSection' => array(
      'label' => t('Manifestation Section'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation_section',
      'description' => t('Manifestation section fields'),
      'controller class' => 'ManifestationSectionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestationSection' => array(
          'label' => 'Manifestation section fields',
          'admin' => array(
            'path' => 'admin/structure/manifestation/section',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkCollection' => array(
      'label' => t('Bibdk collection'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_collection',
      'description' => t('Bibdk collection'),
      'controller class' => 'CollectionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkCollection' => array(
          'label' => 'openformat collection',
          'admin' => array(
            'path' => 'admin/structure/collection',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => TRUE,
        ),
      ),
    ),
    'bibdkSubwork' => array(
      'label' => t('Subwork'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_subwork',
      'description' => t('Manifestations grouped by type'),
      'controller class' => 'subWorkEntityAPIController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkSubwork' => array(
          'label' => t('Subwork'),
          'admin' => array(
            'path' => 'admin/structure/subworks',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkWorkEntity' => array(
      'label' => t('Bibdk entity placeholder for manifestations'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_entity',
      'controller class' => 'bibdkEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkWorkEntity' => array(
          'label' => 'bibdkWorkEntity',
          'admin' => array(
            'path' => 'admin/structure/bibdkWork',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    )
  );

  return $return;
}

/****************** END ENTITY ****************/
