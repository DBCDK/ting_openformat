<?php

// load search info and hooks
module_load_include('inc', 'ting_openformat', 'ting_openformat.search');
module_load_include('inc', 'ting_openformat', 'ting_openformat.field');

error_reporting(E_ALL);
ini_set('display_errors', '1');

function ting_openformat_menu() {
  $items = array();
  $items['work/%'] = array(
    'title' => 'Single work',
    'description' => 'View single work',
    'page arguments' => array(1),
    'page callback' => 'ting_openformat_single',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

$items['admin/config/ting'] = array(
    'title' => 'Openformat',
    'description' => 'Handle ting_openformat module (disable)',
    'position' => 'left',
    'weight' => 1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
	

  $items['admin/config/ting_openformat'] = array(
    'title' => 'Openformat',
    'description' => 'Handle ting_openformat module (disable)',
    'position' => 'left',
    'weight' => 1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ting_openformat/disable'] = array(
    'title' => 'Disable this module',
    'description' => 'Delete virtual fields from this module and disable it',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_openformat_admin_module_disable'),
    'access arguments' => array('administer webservices settings'),
    'file' => 'ting_openformat.admin.inc'
  );
  $items['admin/config/ting_openformat/order'] = array(
    'title' => 'Set Type Order',
    'description' => 'Set the order of the different types in a subwork',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_openformat_type_order_form'),
    'access arguments' => array('administer webservices settings'),
    'file' => 'ting_openformat.admin.inc'
  );

  return $items;
}


/**
 * View single work
 */
function ting_openformat_single($id) {
  $bibdkEntity = ting_openformat_get_single($id);
  return ting_openformat_work_view(current($bibdkEntity));
}

function ting_openformat_get_manifestations($ids) {
  $client = new ting_client_class();
  $params['objectFormat'] = variable_get('ting_search_openformat', 'bibliotekdkWorkDisplay');
  $params['objectId'] = $ids;
  $result = $client->do_get_object($params);
  foreach ($result->collections as $collection)
    $openformat[] = $collection->formattedCollection->formattedCollection->manifestation;
  if(!isset($openformat))
    return array();
  $original_manifestations = array();
  $entity_ids = array();
  _ting_openformat_parse_manifestations($original_manifestations, $entity_ids, $openformat);

  $conditions['manifestations'] = $original_manifestations;
  return entity_load('bibdkWorkEntity', $entity_ids, $conditions, TRUE);
}

function ting_openformat_get_single($id) {
  $params = array();

  $params['objectId'] = $id;
  $params['objectFormat'] = variable_get('ting_search_openformat', 'bibliotekdkWorkDisplay');

  // use getObjectRequest to retrieve a single work
  $client = new ting_client_class();
  $result = $client->do_get_object($params);
  if ( isset($result->collections) && count($result->collections) > 0 )
    $openformat[] = $result->collections[0]->formattedCollection->formattedCollection->manifestation;

  if (empty($openformat)) {
    return t("work with id $id could not be found");
  }

  $original_manifestations = array();
  $entity_ids = array();

  _ting_openformat_parse_manifestations($original_manifestations, $entity_ids, $openformat);

  // conditions array is deprecated in drupal 8.
  $conditions['manifestations'] = $original_manifestations;
  return entity_load('bibdkWorkEntity', $entity_ids, $conditions, TRUE);
}

function _ting_openformat_parse_manifestations(&$original_manifestations, &$entity_ids, $openformat) {
  if (isset($openformat) && is_array($openformat)) {
    foreach ($openformat as $manifestation) {
      $manifestation_id = $manifestation->adminData->pid->{'$'};
      $entity_ids[] = $manifestation_id;
      $original_manifestations[$manifestation_id] = $manifestation;
    }
  }
}

/**
 * Implements hook_form_FORMID_alter (ting_client_admin_webservices_settings @see ting_client.admin.inc).
 * make openformat a dropdownlist.
 * add bibliotekdkWorkDisplay to ting_admin form
 */
function ting_openformat_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state) {
  if (isset($form['webservices']['ting_search_openformat'])) {
    $dkabm = $form['webservices']['ting_search_openformat']['#default_value'];
    $element = &$form['webservices']['ting_search_openformat'];
    // change type to select
    $element['#type'] = 'select';
    // set the original option (dkabm)
    $element['#options']['dkabm'] = 'dkabm';
    // add bibliotekdkWorkDisplay to options
    $element['#options']['bibliotekdkWorkDisplay'] = 'bibliotekdkWorkDisplay';
    // set default value
    //$form['webservices']['ting_search_openformat']['#default_value'] = 'bibliotekdkWorkDisplay';
  }
}

/* * ************ ENTITY *************** */

/**
 * Implements hook_entity_info
 * for bibdk we need 3 entities: work, subwork and manifestation
 * */
function ting_openformat_entity_info() {
  $return = array(
    'bibdkManifestation' => array(
      'label' => t('openformat manifestation'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      // make this a ding_entity ?
      'ding_entity_type' => 'bibdk_manifestation',
      //'ding_entity_type' => 'ting_openformat_manifestation',
      //'ding_entity_menu' => '/manifestation/%ting_manifestation',
      //'ding_entity_index' => 2,

      /* for clarity. default implementation of load hook */
      // 'load hook' => 'manifestation_load',
      'description' => t('openformat fields'),
      'controller class' => 'ManifestionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestation' => array(
          'label' => 'openformat manifestation',
          'admin' => array(
            'path' => 'admin/structure/manifestations',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => TRUE,
        ),
        'reservation' => array(
          'label' => t('Reservation'),
          'custom settings' => TRUE,
        ),
      ),
    ),
    'bibdkSubwork' => array(
      'label' => t('Subwork'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      // make this a ding_entity ?
      'ding_entity_type' => 'bibdk_subwork',
      //'ding_entity_type' => 'ting_openformat_manifestation',
      //'ding_entity_menu' => '/manifestation/%ting_manifestation',
      //'ding_entity_index' => 2,

      /* for clarity. default implementation of load hook */
      // 'load hook' => 'manifestation_load',
      'description' => t('Manifestations grouped by type'),
      'controller class' => 'subWorkEntityAPIController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkSubwork' => array(
          'label' => t('Subwork'),
          'admin' => array(
            'path' => 'admin/structure/subworks',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkWorkEntity' => array(
      'label' => t('Bibdk entity placeholder for manifestations'),
      'fieldable' => TRUE,
      // ?? do we need the base table -- it is not used for anything since controllerclass
      // only implements DrupalEntityControllerInterface and not DrupalDefaultEntityController
      'base table' => 'ting_openformat_manifestation',
      // make this a ding_entity ?
      'ding_entity_type' => 'bibdk_entity',
      //'ding_entity_type' => 'ting_openformat_manifestation',
      //'ding_entity_menu' => '/manifestation/%ting_manifestation',
      //'ding_entity_index' => 2,
      //... could an additional argument be used in ding_entity ?? maybe for setting bundels
      // 'ding_entity_bundle' => 'bibdk_entity',
      'controller class' => 'bibdkEntityApiController',
      'load hook' => 'manifestations_load',
      'entity keys' => array(
        //'id' => 'tid',
        //'ding_entity_id' => 'ding_entity_id',
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkWorkEntity' => array(
          'label' => 'bibdkWorkEntity',
          'admin' => array(
            'path' => 'admin/structure/bibdkWork',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    )
  );

  return $return;
}

/**
 * Load hook as set in entity_info
 * load hook is not currently used .. maybe later.
 */
function ting_openformat_manifestations_load($stdObjects) {
  $ret = array();
  return $ret;
}

/**
 * uri callback as defined in hook_entity_info
 * */
function ting_openformat_maniobject_uri() {
  return 'Br√∏nd';
}

/* * ************** end ENTITY ************** */

/* * *********  panel-pages *************** */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_openformat_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function ting_openformat_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/* * ************** end panel-pages ************** */

/** Implements hook_ding_devel_timers
 */
function ting_openformat_ding_devel_timers() {
  return array(
    'search_client' => array(
      'title' => 'Search client total request time was @time ms.',
    ),
    'search_client_net' => array(
      'title' => 'Search client net time was @time ms.',
      'include in total' => FALSE,
      ));
}

/* * *********** VIEWS ************* */

/*
 * preprocess template to add stylesheet
 * @TODO; this method is for developing only - move and adjust css to proper file when ready
 */

function template_preprocess_ting_openformat_subwork_tabs(&$variables) {
  $path = drupal_get_path('module', 'ting_openformat') . '/css';
  drupal_add_css($path . '/ting_openformat_subwork.css');
}

// @TODO - does this method belong here ??

function ting_openformat_work_view($bibdkWork, $view_mode = 'full', $langcode = NULL) {
  if(!is_object($bibdkWork))
    return;
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  $args = array();
  $work_fields = array();
  $work_fields += _prepare_view('bibdkWorkEntity', $bibdkWork, $view_mode, $langcode);

  $sub = array();
  $subWorks = $bibdkWork->getSubWorks();

  foreach ($subWorks as $id => $subWork) {
    $type = drupal_strtolower($subWork->getType());
    $sub[$type]['type'] = $subWork->getType();
    $sub[$type]['fields'] = _prepare_view('bibdkSubwork', $subWork, $view_mode, $langcode);
    $sub[$type]['id'] = $id;
    $field_content = array();
    foreach ($subWork->getManifestations() as $manifestation) {
      $sub[$type]['manifestations'][$manifestation->id] = ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL);
    }
  }

  $ordered_types = variable_get("ting_openformat_types");

  if (!empty($ordered_types)) {
    foreach ($ordered_types as $type => $value) {
      $type_id = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $type));
      if (isset($sub[$type]))
        $ordered_subworks[$type_id] = $sub[$type];
    }
  }
  else {
    foreach ($sub as $type => $value) {
      $type_id = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $type));  
      $ordered_subworks[$type_id] = $value;
    }
    
  }

  $tabs = theme('ting_openformat_subwork_tabs', array('subWorks' => $ordered_subworks));
  return theme('ting_openformat_work', array(
    'fields' => $work_fields,
    'subWorks' => $ordered_subworks,
    'tabs' => $tabs,
    'ding_id' => $bibdkWork->id));
}

function ting_openformat_collection_view($collections, $view_mode = 'full', $langcode = NULL) {
  // Get all the ID's
  foreach ($collections as $col)
    $ids[] = $col->id;
  // Get the first collection
  $collection = $collections[0];
  // theme collection
  $uid = strtr($ids[0], array(':' => '', '-' => ''));
  return theme('ting_openformat_collection', array(
        'title' => $collection->record['dc:title'][''][0],
        'author' => isset($collection->record['dc:creator']) ? implode(', ', reset($collection->record['dc:creator'])) : "",
        'ids' => implode(",", $ids),
        'showinfo' => drupal_render(drupal_get_form('ting_openformat_show_info_get_form', $ids, $uid)),
        'uid' => $uid,
      ));
}

/**
 * Generates form for 'View more info' on search results page
 * @param type $form_id
 * @param type $form_state
 * @return array
 */
function ting_openformat_show_info_get_form($form_id, $form_state) {
  $uid = $form_state['build_info']['args'][1];
  $form['info'] = array(
    '#type' => 'button',
    '#value' => '',
    //'#attributes' => array('class' => array('work-toggle-element')),
    '#ids' => $form_state['build_info']['args'][0],
    '#uid' => $uid,
    '#id' => 'work_'.$uid,
    '#prefix' => "<span id='ajax-$uid'>",
    '#suffix' => "</span>",
    '#ajax' => array(
      'callback' => 'ting_openformat_show_info_ajax_callback',
      'wrapper' => 'ajax_placeholder_' . $uid,
      'method' => 'replace',
      'event' => 'click',
      ),
  );
  return $form;
}

/**
 * Ajax callback. Called when user clicks 'view more information' on a work on search results page
 * @param type $form
 * @param type $form_state
 * @return type
 */
function ting_openformat_show_info_ajax_callback(&$form, $form_state) {
  $ids = $form_state['clicked_button']['#ids'];
  $uid = $form_state['clicked_button']['#uid'];
  $bibdkWork = ting_openformat_get_manifestations($ids);
  $view = ting_openformat_work_view(current($bibdkWork));
  $commands = array();
  $commands[] = ajax_command_remove("#ajax-$uid");
  $commands[] = ajax_command_replace(null, $view);
  //$commands[] = ajax_command_replace(NULL, "$ids $uid Dette er en test");
  return array('#type' => 'ajax', '#commands' => $commands);
}

function ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  $field_content = _prepare_view('bibdkManifestation', $manifestation, $view_mode, $langcode);
  return theme('ting_openformat_manifestation', array('fields' => $field_content,));
}

/**
 * attach entity fields to a single entity. Return a renderable array
 * */
function _prepare_view($entity_type, $object, $view_mode, $langcode) {
  field_attach_prepare_view($entity_type, array($object->id => $object), $view_mode, $langcode);
  entity_prepare_view($entity_type, array($object->id => $object), $langcode);
  $fields = field_attach_view($entity_type, $object, $view_mode, $langcode);
  return $fields;
}

/* * ********* END VIEWS ********** */


/* * ***************** ADMIN **************** */

/**
 * Impelments hook_flush_caches
 * */
function ting_openformat_flush_caches() {
  return array('cache_bibdk_webservices');
}

/* * * FACETBROWSER *** */

/**
 * Implements hook_ding_facetbrowser().
 * initialize facetbrowser
 */
function ting_openformat_ding_facetbrowser() {
  $results = new stdClass();
  $results->show_empty = FALSE;
  $search_result = drupal_static('ting_search_results');
  if ($search_result) {
    $results->facets = ($search_result instanceof TingClientSearchResult) ? $search_result->facets : array();
    $results->searchkey = $search_result->search_key;
    return $results;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * add menu item on admin/structure .. maybe this can be done via EntityDefaultUIController -- @see entity module
 *
 * Adjusts the menu so that the field subtab becomes the default local task,
 * to avoid having an useless placeholder page.
 */
function ting_openformat_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    if (isset($items['admin/structure/bibdkWork/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = &$items['admin/structure/bibdkWork'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Work entity for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/bibdkWork/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/manifestations/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/manifestations'] = $items['admin/structure/manifestations/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = &$items['admin/structure/manifestations'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'manifestations for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/manifestations/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/subworks/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/subworks'] = $items['admin/structure/subworks/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = &$items['admin/structure/subworks'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Subworks for bibliotek.dk';
      $item['description'] = 'Manage subwork display.';

      $items['admin/structure/subworks/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
  }
}

/**
 * Fetch known types from the datawell.
 */
function _ting_openformat_fetch_types() {
  $types = variable_get('ting_openformat_types', array());

  $options = array(
    'facets' => array('facet.type'),
    'numFacets' => 99,
    'reply_only' => TRUE,
    'sort' => 'random',
    'query' => "*=*",
    'start' => 0,
    'numResults' => 0,
    'agency' => variable_get('ting_agency'),
    'objectFormat' => variable_get('ting_search_openformat', 'dkabm'),
    'profile' => variable_get('ting_search_profile', FALSE)
  );

  $client = new ting_client_class();
  $result = $client->do_search($options);

  foreach ($result->facets['facet.type']->terms as $term => $count) {
    if (!isset($types[$term]))
      $types[$term] = array("type" => $term, "count" => $count, "weight" => 1000);
  }

  // Only save if we actually got any types.
  if (!empty($types)) {
    variable_set('ting_openformat_types', $types);
  }
}
