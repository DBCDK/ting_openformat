<?php
// load search info and hooks
module_load_include('inc', 'ting_openformat', 'ting_openformat.search');
module_load_include('inc', 'ting_openformat', 'ting_openformat.entities');
module_load_include('inc', 'ting_openformat', 'ting_openformat.field_definitions');
module_load_include('inc', 'ting_openformat', 'ting_openformat.field');


function ting_openformat_menu() {
  $items = array();
  $items['work/%'] = array(
    'title' => 'Single work',
    'description' => 'View single work',
    'page arguments' => array(1),
    'page callback' => 'ting_openformat_single',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['ajax/load_more_results'] = array(
    'title' => 'Load more results AJAX callback',
    'description' => 'AJAX callback for ting_openformat_load_more_results. Loads X number of searchresults and returns the result to the client as JSON.',
    'access arguments' => array('access content'),
    'page callback' => 'ting_openformat_load_more_results_ajax_callback',
    'file' => 'ting_openformat_load_more.inc',
    'file path' => drupal_get_path('module', 'ting_openformat') . '/plugins/content_types/',
    'type' => MENU_CALLBACK,
  );
  $items['ting_openformat/ajax/manifestations'] = array(
    'title' => 'Single work',
    'description' => 'View single work',
    'page arguments' => array(1),
    'page callback' => 'ting_openformat_ajax_manifestations',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/ting'] = array(
    'title' => 'Openformat',
    'description' => 'Handle ting_openformat module (disable)',
    'position' => 'left',
    'weight' => 1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ting_openformat'] = array(
    'title' => 'Openformat',
    'description' => 'Handle ting_openformat module (disable)',
    'position' => 'left',
    'weight' => 1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ting_openformat/disable'] = array(
    'title' => 'Disable this module',
    'description' => 'Delete virtual fields from this module and disable it',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_openformat_admin_module_disable'),
    'access arguments' => array('administer webservices settings'),
    'file' => 'ting_openformat.admin.inc'
  );
  $items['admin/config/ting_openformat/order'] = array(
    'title' => 'Set Type Order',
    'description' => 'Set the order of the different types in a subwork',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_openformat_type_order_form'),
    'access arguments' => array('administer webservices settings'),
    'file' => 'ting_openformat.admin.inc'
  );

  return $items;
}


/** Load manifestations and insert into placeholder via AJAX
 * @param $type
 * @param $json json encoded manifestation ids
 * @return json|false
 */
function ting_openformat_ajax_manifestations($type, $json){

  $commands = array();
  $manifestation_ids = json_decode($json);

  #$commands[] = ajax_command_alert($manifestation_ids);

  if(!is_array($manifestation_ids) || count($manifestation_ids) == 0){
    return false;
  }

  $bibdkEntity = ting_openformat_get_manifestations($manifestation_ids);

  if (!isset($bibdkEntity) || count($bibdkEntity) == 0)
    return false;

  $bibdkEntity = reset($bibdkEntity);
  $manifestations = $bibdkEntity->manifestations;

  if (!isset($manifestations) || count($manifestations) == 0)
    return false;

  foreach($manifestations as $manifestation){
    $view = drupal_render(ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL));
    #$commands[] = ajax_command_alert($view);
    #$commands[] = ajax_command_replace('[data-id='. $manifestation->id.']', $view);
    $commands[] = array(
      'command' => 'add_manifestations',
      'selector' => '[data-id='. $manifestation->id.']',
      'data' => $view,
    );


  }


  ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
}

/**
 * Implements hook_worktabs_items().
 * @param array $tabs
 * @param BibdkWork $entity
 * @return array
 */
function ting_openformat_worktabs_items($tabs, $entity) {
  $tabs['subjects']['subjects'] = array(
    'title' => t('subjects', array(), array('context' => 'ting_openformat')),
    'btn_txt_closed' => t('view_more', array(), array('context' => 'ting_openformat')),
    'rendered' => ting_openformat_get_tab_content($entity),
    'weight' => 0,
  );
  return $tabs;
}

/**
 * @param BibdkWork $entity
 * @return array|null
 */
function ting_openformat_get_tab_content($entity) {
  $subjects = $entity->getSubjects();
  $markup = _ting_openformat_get_markup_for_field($subjects, '; ', FALSE);
  return isset($markup) ? drupal_render($markup) : '';
}

/**
 * View single work
 */
function ting_openformat_single($id) {
  drupal_set_title('');
  $bibdkEntity = ting_openformat_get_manifestations($id);
  if (!isset($bibdkEntity) || count($bibdkEntity) == 0)
    return t('no_work_found');
  $bibdkEntity = reset($bibdkEntity);
  $manifestation = reset($bibdkEntity->manifestations);

  return theme('ting_openformat_single_work', array(
        'title' => $bibdkEntity->getTitle(),
        'partOf' => drupal_render(_ting_openformat_get_markup_for_field($manifestation->getHostPublication())),
        'author' => drupal_render(_ting_openformat_get_markup_for_field($bibdkEntity->getCreator())),
        'ids' => $id,
        'work' => ting_openformat_work_view($bibdkEntity),
      ));
}

/**
 * @param $ids
 * @return array
 */
function ting_openformat_get_manifestations($ids) {
  $client = new ting_client_class();
  $params['objectFormat'] = variable_get('ting_search_openformat', 'bibliotekdkWorkDisplay');
  $params['objectId'] = $ids;
  $params['includeHoldingsCount'] = TRUE;
  //$params['relationData'] = 'uri';
  drupal_alter('ting_openformat_getobject_params', $params);
  $result = $client->do_request('object', $params);
  if (empty($result->collections)) {
    return array();
  }

  foreach ($result->collections as $TingClientObjectCollection) {
    $manifestation = $TingClientObjectCollection->formattedCollection->formattedCollection->manifestation;
    foreach ($TingClientObjectCollection->objects as $TingClientObject) {
      $relationsData = isset($TingClientObject->relationsData) ? $TingClientObject->relationsData : FALSE;
    }
    if ($relationsData) {
      $manifestation->relationsData = $relationsData;
    }
    $openformat[] = $manifestation;
  }

  $original_manifestations = array();
  $entity_ids = array();
  _ting_openformat_parse_manifestations($original_manifestations, $entity_ids, $openformat);
  $conditions['manifestations'] = $original_manifestations;
  return entity_load('bibdkWorkEntity', $entity_ids, $conditions, TRUE);
}

/**
 * @param $id
 * @return null|string
 */
function ting_openformat_get_single($id) {
  $params = array();

  $params['objectId'] = $id;
  $params['objectFormat'] = variable_get('ting_search_openformat', 'bibliotekdkWorkDisplay');
  $params['includeHoldingsCount'] = TRUE;
  // use getObjectRequest to retrieve a single work
  $client = new ting_client_class();
  $result = $client->do_request('object', $params);
  if (isset($result->collections) && count($result->collections) > 0) {
    $openformat[] = $result->collections[0]->formattedCollection->formattedCollection->manifestation;
  }

  if (empty($openformat)) {
    return t("work with id $id could not be found");
  }

  $original_manifestations = array();
  $entity_ids = array();

  _ting_openformat_parse_manifestations($original_manifestations, $entity_ids, $openformat);

  // conditions array is deprecated in drupal 8.
  $conditions['manifestations'] = $original_manifestations;
  return entity_load('bibdkWorkEntity', $entity_ids, $conditions, TRUE);
}

function _ting_openformat_parse_manifestations(&$original_manifestations, &$entity_ids, $openformat) {
  if (isset($openformat) && is_array($openformat)) {
    foreach ($openformat as $manifestation) {
      $manifestation_id = $manifestation->adminData->pid->{'$'};
      $entity_ids[] = $manifestation_id;
      $original_manifestations[$manifestation_id] = $manifestation;
    }
  }
}

function ting_openformat_form_search_block_form_alter(&$form, &$form_state, $form_id) { // rebuild
  $form['search_block_form']['#default_value'] = drupal_static('ting_search_query');
}

/**
 * Implements hook_form_FORMID_alter (ting_client_admin_webservices_settings
 *
 * @see ting_client.admin.inc).
 * make openformat a dropdownlist.
 * add bibliotekdkWorkDisplay to ting_admin form
 */
function ting_openformat_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state) {
  if (isset($form['webservices']['ting_search_openformat'])) {
    $dkabm = $form['webservices']['ting_search_openformat']['#default_value'];
    $element = & $form['webservices']['ting_search_openformat'];
    // change type to select
    $element['#type'] = 'select';
    // set the original option (dkabm)
    $element['#options']['dkabm'] = 'dkabm';
    // add bibliotekdkWorkDisplay to options
    $element['#options']['bibliotekdkWorkDisplay'] = 'bibliotekdkWorkDisplay';
  }
}


/** Translate CQL commandos. Only support english or danish
 * @param $cql
 * @return null|string
 */
function ting_openformat_get_cql_commando($cql){
  $return = NULL;

  switch ($cql){
    case 'AND' :
      $return = ting_openformat_get_cql_language() == 'cqldan' ? ' OG ': ' AND ';
      break;
    case 'OR' :
      $return = ting_openformat_get_cql_language() == 'cqldan' ? ' ELLER ': ' OR ';
      break;
  }
  return $return;
}

function ting_openformat_get_cql_language(){

  global $language;

  return $language->language == 'da' ? 'cqldan' : 'cqleng';
}

/* * ************ ENTITY *************** */

/**
 * Implements hook_entity_info
 * for bibdk we need 3 entities: work, subwork and manifestation
 * */
function ting_openformat_entity_info() {
  $return = array(
    'bibdkManifestation' => array(
      'label' => t('openformat manifestation'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation',
      /* for clarity. default implementation of load hook */
      // 'load hook' => 'manifestation_load',
      'description' => t('openformat fields'),
      'controller class' => 'ManifestionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestation' => array(
          'label' => 'openformat manifestation',
          'admin' => array(
            'path' => 'admin/structure/manifestations',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => TRUE,
        ),
        'reservation' => array(
          'label' => t('Reservation'),
          'custom settings' => TRUE,
        ),
      ),
    ),
    'bibdkManifestationVolume' => array(
      'label' => t('Manifestation Volume'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation_volume',
      'description' => t('Manifestation volume fields'),
      'controller class' => 'ManifestationVolumeEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestationVolume' => array(
          'label' => 'Manifestation volume fields',
          'admin' => array(
            'path' => 'admin/structure/manifestation/volume',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkManifestationSection' => array(
      'label' => t('Manifestation Section'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation_section',
      'description' => t('Manifestation section fields'),
      'controller class' => 'ManifestationSectionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestationSection' => array(
          'label' => 'Manifestation section fields',
          'admin' => array(
            'path' => 'admin/structure/manifestation/section',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkCollection' => array(
      'label' => t('Bibdk collection'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_collection',
      'description' => t('Bibdk collection'),
      'controller class' => 'CollectionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkCollection' => array(
          'label' => 'openformat collection',
          'admin' => array(
            'path' => 'admin/structure/collection',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => TRUE,
        ),
      ),
    ),
    'bibdkSubwork' => array(
      'label' => t('Subwork'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      // make this a ding_entity ?
      'ding_entity_type' => 'bibdk_subwork',
      //'ding_entity_type' => 'ting_openformat_manifestation',
      //'ding_entity_menu' => '/manifestation/%ting_manifestation',
      //'ding_entity_index' => 2,

      /* for clarity. default implementation of load hook */
      // 'load hook' => 'manifestation_load',
      'description' => t('Manifestations grouped by type'),
      'controller class' => 'subWorkEntityAPIController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkSubwork' => array(
          'label' => t('Subwork'),
          'admin' => array(
            'path' => 'admin/structure/subworks',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkWorkEntity' => array(
      'label' => t('Bibdk entity placeholder for manifestations'),
      'fieldable' => TRUE,
      // ?? do we need the base table -- it is not used for anything since controllerclass
      // only implements DrupalEntityControllerInterface and not DrupalDefaultEntityController
      'base table' => 'ting_openformat_manifestation',
      // make this a ding_entity ?
      'ding_entity_type' => 'bibdk_entity',
      //'ding_entity_type' => 'ting_openformat_manifestation',
      //'ding_entity_menu' => '/manifestation/%ting_manifestation',
      //'ding_entity_index' => 2,
      //... could an additional argument be used in ding_entity ?? maybe for setting bundels
      // 'ding_entity_bundle' => 'bibdk_entity',
      'controller class' => 'bibdkEntityApiController',
      'load hook' => 'manifestations_load',
      'entity keys' => array(
        //'id' => 'tid',
        //'ding_entity_id' => 'ding_entity_id',
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkWorkEntity' => array(
          'label' => 'bibdkWorkEntity',
          'admin' => array(
            'path' => 'admin/structure/bibdkWork',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    )
  );

  return $return;
}

/**
 * Load hook as set in entity_info
 * load hook is not currently used .. maybe later.
 */
function ting_openformat_manifestations_load($stdObjects) {
  $ret = array();
  return $ret;
}

/**
 * uri callback as defined in hook_entity_info
 * */
function ting_openformat_maniobject_uri() {
  return 'Brønd';
}

/* * ************** end ENTITY ************** */

/* * *********  panel-pages *************** */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_openformat_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function ting_openformat_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/* * ************** end panel-pages ************** */

/** Implements hook_ding_devel_timers
 */
function ting_openformat_ding_devel_timers() {
  return array(
    'search_client' => array(
      'title' => 'Search client total request time was @time ms.',
    ),
    'search_client_net' => array(
      'title' => 'Search client net time was @time ms.',
      'include in total' => FALSE,
      ));
}

/* * *********** VIEWS ************* */

/*
 * preprocess template to add stylesheet
 * @TODO; this method is for developing only - move and adjust css to proper file when ready
 */

function template_preprocess_ting_openformat_subwork_tabs(&$variables) {
  $path = drupal_get_path('module', 'ting_openformat') . '/css';
  drupal_add_css($path . '/ting_openformat_subwork.css');
}

/** Creates html view for bibdkWorkEntity
 * @param Manifestation|BibdkWork|BibdkSubwork|BibdkCollection $bibdkWork
 * @param string $view_mode
 * @param null $langcode
 * @return string
 */
function ting_openformat_work_view($bibdkWork, $view_mode = 'full', $langcode = NULL) {
  if (!is_object($bibdkWork)) {
    return;
  }
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  $work_fields = array();
  $work_fields += _prepare_view('bibdkWorkEntity', $bibdkWork, $view_mode, $langcode);

  $subWorks = $bibdkWork->getSubWorks();

  $ordered_subworks = ting_openformat_get_ordered_subworks($subWorks);

  $ding_id = preg_replace('/[^a-zA-Z0-9-]+/', '-', $bibdkWork->id);
  $tabs = theme('ting_openformat_subwork_tabs', array('subWorks' => $ordered_subworks, 'ding_id' => $ding_id));
  return theme('ting_openformat_work', array(
        'fields' => $work_fields,
        'subWorks' => $ordered_subworks,
        'tabs' => $tabs,
        'ding_id' => $ding_id));
}

/** Get Subworks ordered by type and subtype
 * @param $subWorks
 * @return mixed
 */
function ting_openformat_get_ordered_subworks($subWorks){
  $sub = array();
  foreach ($subWorks as $id => $subWork) {
    $type = drupal_strtolower($subWork->getType());
    $subtype = $subWork->getSubType();
    $sub[$type][$subtype] = ting_openformat_subwork_view($subWork);
  }
  
  foreach ($sub as $type => $value) {
    foreach ($value as $subtype => $val) {
      $subtype_id = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $subtype));
      $trans = _ting_openformat_type_translation($type, $subtype);
      $type_id = $trans['type'];
      $ordered_subworks[$type_id][$subtype_id]['manifest'] = $val;
      $ordered_subworks[$type_id][$subtype_id]['translation'] = $trans;
      $ordered_subworks[$type_id][$subtype_id]['manifest']['subtype_actions'] = module_invoke_all('ting_openformat_subwork_materialtype_actions', $ordered_subworks, $type_id, $subtype_id, $val['bibdkSubwork']);
    }
  }
  return $ordered_subworks;
}

/** Creates html view for bibdkSubwork
 * @param $bibdkSubwork
 * @param string $view_mode
 * @param null $langcode
 * @return mixed
 */
function ting_openformat_subwork_view($bibdkSubwork, $view_mode = 'full', $langcode = NULL){

  $sub['fields'] = _prepare_view('bibdkSubwork', $bibdkSubwork, $view_mode, $langcode);
  $sub['bibdkSubwork'] = $bibdkSubwork;
  foreach ($bibdkSubwork->getManifestations() as $manifestation) {
    if (get_class($manifestation) == 'Manifestation'){
      // first element is parsed
      $manifestation_view = ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL);
    }
    else {
      // other elements are given a container
      $manifestation_view = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => array(
          'class' => 'manifestation-container',
          'data-id' => $manifestation->id,
        ),

      );
      // container for the remaining
    }
    $sub['manifestations'][$manifestation->id] = drupal_render($manifestation_view);
  }
  return $sub;
}

/**
 * Generates the collection view with an 'Order any edition' button if view is
 * implemented (requires bibdk_reservation module)
 *
 * @param BibdkCollection $bibdkobject
 * @return string
 */
function ting_openformat_collection_view($bibdkobject) {
  $all_ids_in_collection = $bibdkobject->getCollectionIds();
  $uid = strtolower(strtr(reset($all_ids_in_collection), array(':' => '', '-' => '')));
  $form = drupal_get_form('ting_openformat_show_info_get_form', $bibdkobject, $uid);
  $actions = _prepare_view('bibdkCollection', $bibdkobject, 'full', NULL);
  $workType = $bibdkobject->getWorkType();
  $type = $bibdkobject->getType();
  $types_classes = _ting_openformat_get_types_list($bibdkobject);
  return theme('ting_openformat_collection', array(
        'title' => $bibdkobject->getTitle(),
        'partOf' => $bibdkobject->getPartOf(),
        'author' => $bibdkobject->getAuthor(),
        'work_type' => ( !empty($workType) ) ? 'type-' . $workType : 'type-undefined',
        'type' => $type,
        'ids' => implode(',', $all_ids_in_collection),
        'showinfo' => drupal_render($form),
        'uid' => $uid,
        'actions' => (!empty($actions)) ? $actions : array(),
        'types' => $types_classes,
      ));
}

/**
 * Genrates a list with classes based on the material types in the given
 * collection
 *
 * @param BibdkCollection $bibdkobject
 * @return String html
 */
function _ting_openformat_get_types_list($bibdkobject){
  $types = $bibdkobject->getWorkTypes();
  $items = array();
  foreach($types as $type => $ids) {
    $items[$type] =  '<span class="materialtype ' . $type . '-icon-small " title="'. t($type) .'">&nbsp;</span>';
  }

  if($bibdkobject->isOnline()){
    $items['net-icon-small'] =  '<span class="materialtype online-icon-small" title="'. t('online') .'">&nbsp;</span>';
  }

  $list = array(
    '#type' => 'ol',
    '#theme' => 'item_list',
    '#items' => $items,
    '#attributes' => array(
      'class' => 'material-types-list',
    ),
  );


  return drupal_render($list);
}

/**
 * Generates form for 'View more info' on search results page
 *
 * @param array $form_id
 * @param array $form_state
 * @param $bibdkObject
 * @param $uid
 * @return array
 */
function ting_openformat_show_info_get_form($form_id, $form_state, $bibdkObject, $uid) {
  //$uid = $form_state['build_info']['args'][1];
  $all_ids_in_collection = $bibdkObject->getCollectionIds();
  $form['info'] = array(
    '#type' => 'button',
    '#value' => '',
    '#ids' => $all_ids_in_collection,
    '#uid' => $uid,
    '#collection' => $bibdkObject,
    '#id' => 'work_' . $uid,
    '#prefix' => "<span id='ajax-$uid'>",
    '#suffix' => "</span>",
    '#attributes' => array('class' => array('visuallyhidden')),
    '#ajax' => array(
      'callback' => 'ting_openformat_show_info_ajax_callback',
      'wrapper' => 'ajax_placeholder_' . $uid,
      'method' => 'replace',
      'event' => 'click',
    ),
  );
  return $form;
}

/**
 * Ajax callback. Called when user clicks 'view more information' on a work on search results page
 *
 * @param type $form
 * @param type $form_state
 * @return type
 */
function ting_openformat_show_info_ajax_callback(&$form, $form_state) {
  $ids = $form_state['clicked_button']['#ids'];
  $uid = $form_state['clicked_button']['#uid'];
  $collection = $form_state['clicked_button']['#collection'];


  $view = ting_openformat_load_single_full_work($collection, $ids, $uid);

  $view = theme('status_messages') . $view;

  $commands = array();
  $commands[] = ajax_command_remove("#ajax-$uid");
  $commands[] = ajax_command_replace(NULL, $view);

  return array('#type' => 'ajax', '#commands' => $commands);
}

function  ting_openformat_load_single_full_work($collection, $ids, $uid){
  module_invoke_all('show_manifestation_info_prerender', $ids, $uid);
  foreach ($collection->manifestations as $manifestation) {
    $briefDisplay = new BibdkBriefDisplay($manifestation);
    if (!isset($bibdkWork)){
      $bibdkWork = ting_openformat_get_manifestations($briefDisplay->id);
      $bibdkWork = current($bibdkWork);
      $bibdkWork->manifestations[$briefDisplay->id]->setBriefDisplayType($briefDisplay->gettype());
      $bibdkWork->manifestations[$briefDisplay->id]->setSubType($briefDisplay->getSubtype());
    }
    else {
      $bibdkWork->manifestations[$briefDisplay->id] = $briefDisplay;
    }

  }

  return ting_openformat_work_view($bibdkWork);
}



/**
 * @param $manifestation
 * @param string $view_mode
 * @param null $langcode
 * @return array
 */
function ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  $fields = _prepare_view('bibdkManifestation', $manifestation, $view_mode, $langcode);

  $actions = ting_openformat_get_actions('bibdkManifestation', $manifestation, $view_mode, $langcode);

  $build = array(
    '#theme' => 'ting_openformat_manifestation',
    '#view_mode' => $view_mode,
    '#language' => $langcode,
    '#fields' => $fields,
    '#actions' => $actions,
  );
  return $build;
}


/**
 * Create view for manifestation volume fields
 * @param $volume
 * @param string $view_mode
 * @param null $langcode
 * @return bool|string
 */
function ting_openformat_volume_view($volume, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  $field_content = _prepare_view('bibdkManifestationVolume', $volume, $view_mode, $langcode);
  return drupal_render($field_content);
}

/**
 * Create view for manifestation section fields
 * @param $volume
 * @param string $view_mode
 * @param null $langcode
 * @return bool|string
 */
function ting_openformat_section_view($volume, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  $field_content = _prepare_view('bibdkManifestationSection', $volume, $view_mode, $langcode);
  return drupal_render($field_content);
}

/**
 * attach entity fields to a single entity. Return a renderable array
 * @param $entity_type
 * @param Manifestation|BibdkWork|BibdkSubwork|BibdkCollection $object
 * @param $view_mode
 * @param $langcode
 * @return array
 */
function _prepare_view($entity_type, $object, $view_mode, $langcode) {
  field_attach_prepare_view($entity_type, array($object->id => $object), $view_mode, $langcode);
  entity_prepare_view($entity_type, array($object->id => $object), $langcode);
  $fields = field_attach_view($entity_type, $object, $view_mode, $langcode);
  return $fields;
}

/* * ********* END VIEWS ********** */



/** Invokes hook_ting_openformat_actions
 * @param $type
 * @param $entity
 * @param string $view_mode
 * @param null $langcode
 * @return array
 */
function ting_openformat_get_actions($type, $entity, $view_mode = 'full', $langcode = NULL) {

  $actions = module_invoke_all('ting_openformat_actions', $type, $entity, $view_mode, $langcode);

  if (!empty($actions))
    uasort($actions, 'element_sort');

  return $actions;
}
/**
 * @param array $a
 * @param array $b
 * @return Boolean
 */
function _ting_openformat_sortfields_by_weight($a, $b) {
  return $a['#weight'] - $b['#weight'];
}

/* * ***************** ADMIN **************** */

/**
 * Impelments hook_flush_caches
 * */
function ting_openformat_flush_caches() {
  return array('cache_bibdk_webservices');
}

/* * * FACETBROWSER *** */

/**
 * Implements hook_ding_facetbrowser().
 * initialize facetbrowser
 */
function ting_openformat_ding_facetbrowser() {
  $results = new stdClass();
  $results->show_empty = FALSE;
  $search_result = drupal_static('ting_search_results');
  if ($search_result) {
    $results->facets = ($search_result instanceof TingClientSearchResult) ? $search_result->facets : array();
    $results->searchkey = $search_result->search_key;
    return $results;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * add menu item on admin/structure .. maybe this can be done via EntityDefaultUIController --
 *
 * @see entity module
 *
 * Adjusts the menu so that the field subtab becomes the default local task,
 * to avoid having an useless placeholder page.
 */
function ting_openformat_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    if (isset($items['admin/structure/bibdkWork/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/bibdkWork'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Work entity for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/bibdkWork/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/manifestations/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/manifestations'] = $items['admin/structure/manifestations/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/manifestations'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'manifestations for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/manifestations/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/subworks/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/subworks'] = $items['admin/structure/subworks/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/subworks'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Subworks for bibliotek.dk';
      $item['description'] = 'Manage subwork display.';

      $items['admin/structure/subworks/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/collection/fields'])) {
      $items['admin/structure/collection'] = $items['admin/structure/collection/fields'];
      $item = & $items['admin/structure/collection'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Collections for bibliotek.dk';
      $item['description'] = 'Manage collection display.';

      $items['admin/structure/collection/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 3,
      );
    }
    if (isset($items['admin/structure/manifestation/volume/fields'])) {
      $items['admin/structure/manifestation/volume'] = $items['admin/structure/manifestation/volume/fields'];
      $item = &$items['admin/structure/manifestation/volume'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Manifestation Volume for bibliotek.dk';
      $item['description'] = 'Manage Volume display.';

      $items['admin/structure/manifestation/volume/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 2,
      );
    }
    if (isset($items['admin/structure/manifestation/section/fields'])) {
      $items['admin/structure/manifestation/section'] = $items['admin/structure/manifestation/section/fields'];
      $item = &$items['admin/structure/manifestation/section'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Manifestation Section for bibliotek.dk';
      $item['description'] = 'Manage Section display.';

      $items['admin/structure/manifestation/section/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
  }
}

/**
 * Fetch known types from the datawell.
 */
function _ting_openformat_fetch_types() {
  $types = variable_get('ting_openformat_types', array());

  $options = array(
    'facets' => array('facet.type'),
    'numFacets' => 99,
    'reply_only' => TRUE,
    'sort' => 'random',
    'query' => "*=*",
    'start' => 0,
    'numResults' => 0,
    'agency' => variable_get('ting_agency'),
    'objectFormat' => variable_get('ting_search_openformat', 'dkabm'),
    'profile' => variable_get('ting_search_profile', FALSE)
  );

  $client = new ting_client_class();
  $result = $client->do_request('search', $options);

  foreach ($result->facets['facet.type']->terms as $term => $count) {
    if (!isset($types[$term])) {
      $types[$term] = array("type" => $term, "count" => $count, "weight" => 1000);
    }
  }

  // Only save if we actually got any types.
  if (!empty($types)) {
    variable_set('ting_openformat_types', $types);
  }
}

/**
 * Translates variables into strings
 * @param $type
 * @param $subtype
 * @return array
 */
function _ting_openformat_type_translation($type, $subtype) {

  switch ($type) {
    case 'book':
      $type = t('book_placeholder', array(), array('context' => 'ting_openformat'));
      break;
    case 'literature':
      $type = t('literature');
      break;
    case 'movie':
      $type = t('movie');
      break;
    case 'music':
      $type = t('music');
      break;
    case 'game':
      $type = t('game');
      break;
    case 'article':
      $type = t('article');
      break;
    case 'audiobook':
      $type = t('audiobook');
      break;
    case 'sheetmusic':
      $type = t('sheetmusic_placeholder', array(), array('context' => 'ting_openformat'));
      break;
    case 'none':
      $type = t('none');
      break;
    case 'online':
      $type = t('online');
      break;
  }

  switch ($subtype) {
    case 'Akvarel':
      $subtype = t('Akvarel');
      break;
    case 'Anmeldelse':
      $subtype = t('Anmeldelse');
      break;
    case 'Arkitekturtegning':
      $subtype = t('Arkitekturtegning');
      break;
    case 'Artikel':
      $subtype = t('Artikel');
      break;
    case 'Avis':
      $subtype = t('Avis');
      break;
    case 'Avis (net)':
      $subtype = t('Avis (net)');
      break;
    case 'Avisartikel':
      $subtype = t('Avisartikel');
      break;
    case 'Billedbog':
      $subtype = t('Billedbog');
      break;
    case 'Billedbånd':
      $subtype = t('Billedbånd');
      break;
    case 'Billedkort':
      $subtype = t('Billedkort');
      break;
    case 'Billedtæppe':
      $subtype = t('Billedtæppe');
      break;
    case 'Blu ray':
      $subtype = t('Blu ray');
      break;
    case 'Blu-ray':
      $subtype = t('blu-ray_placeholder', array(), array('context' => 'ting_openformat'));
      break;
    case 'Bog':
      $subtype = t('Bog');
      break;
    case 'bog':
      $subtype = t('Bog');
      break;
    case 'Bånd':
      $subtype = t('bånd_placeholder', array(), array('context' => 'ting_openformat'));
      break;
    case 'Bog stor skrift':
      $subtype = t('Bog stor skrift');
      break;
    case 'CD':
      $subtype = t('cd_placeholder', array(), array('context' => 'ting_openformat'));
      break;
    case 'Cd (musik)':
      $subtype = t('Cd (musik)');
      break;
    case 'CD-I':
      $subtype = t('CD-I');
      break;
    case 'Cd-rom':
      $subtype = t('cd-rom__placeholder', array(), array('context' => 'ting_openformat'));
      break;
    case 'CD-rom':
      $subtype = t('CD-rom');
      break;
    case 'Cd-rom (mp3)':
      $subtype = t('Cd-rom (mp3)');
      break;
    case 'DCC-bånd':
      $subtype = t('DCC-bånd');
      break;
    case 'Dias':
      $subtype = t('Dias');
      break;
    case 'Diskette':
      $subtype = t('Diskette');
      break;
    case 'DTBook':
      $subtype = t('DTBook');
      break;
    case 'Dvd':
      $subtype = t('dvd_placeholder', array(), array('context' => 'ting_openformat'));
      break;
    case 'DVD (film)':
      $subtype = t('DVD (film)');
      break;
    case 'DVD-rom':
      $subtype = t('DVD-rom');
      break;
    case 'Ebog':
      $subtype = t('Ebog');
      break;
    case 'Emnekasse':
      $subtype = t('Emnekasse');
      break;
    case 'Fastplade':
      $subtype = t('Fastplade');
      break;
    case 'Film (net)':
      $subtype = t('Film (net)');
      break;
    case 'Flipover-materiale':
      $subtype = t('Flipover-materiale');
      break;
    case 'Flonellografmateriale':
      $subtype = t('Flonellografmateriale');
      break;
    case 'Foto':
      $subtype = t('Foto');
      break;
    case 'Foto-cd':
      $subtype = t('Foto-cd');
      break;
    case 'Fotoreproduktion':
      $subtype = t('Fotoreproduktion');
      break;
    case 'GameBoy':
      $subtype = t('GameBoy');
      break;
    case 'GameBoy Advance':
      $subtype = t('GameBoy Advance');
      break;
    case 'Graphic novel':
      $subtype = t('Graphic novel');
      break;
    case 'Grafisk blad':
      $subtype = t('Grafisk blad');
      break;
    case 'Grammofonplade':
      $subtype = t('Grammofonplade');
      break;
    case 'Kassettelydbånd':
      $subtype = t('Kassettelydbånd');
      break;
    case 'Kort':
      $subtype = t('Kort');
      break;
    case 'Kunstreproduktion':
      $subtype = t('Kunstreproduktion');
      break;
    case 'Laborativt materiale':
      $subtype = t('Laborativt materiale');
      break;
    case 'Legetøj':
      $subtype = t('Legetøj');
      break;
    case 'Lydbog (bånd)':
      $subtype = t('Lydbog (bånd)');
      break;
    case 'Lydbog (cd)':
      $subtype = t('Lydbog (cd)');
      break;
    case 'Lydbog (net)':
      $subtype = t('Lydbog (net)');
      break;
    case 'Lydbog (cd-mp3)':
      $subtype = t('Lydbog (cd-mp3)');
      break;
    case 'Maleri':
      $subtype = t('Maleri');
      break;
    case 'Materiale til indlæringsapparat':
      $subtype = t('Materiale til indlæringsapparat');
      break;
    case 'Mikroform':
      $subtype = t('Mikroform');
      break;
    case 'Mini disc':
      $subtype = t('Mini disc');
      break;
    case 'Musik (net)':
      $subtype = t('Musik (net)');
      break;
    case 'Måleapparat':
      $subtype = t('Måleapparat');
      break;
    case 'Netdokument':
      $subtype = t('Netdokument');
      break;
    case 'Nintendo DS':
      $subtype = t('Nintendo DS');
      break;
    case 'Node':
      $subtype = t('Node');
      break;
    case 'Pc-spil':
      $subtype = t('Pc-spil');
      break;
    case 'Pc-spil (net)':
      $subtype = t('Pc-spil (net)');
      break;
    case 'Ordkort':
      $subtype = t('Ordkort');
      break;
    case 'Originalkunst':
      $subtype = t('Originalkunst');
      break;
    case 'Periodikum':
      $subtype = t('Periodikum');
      break;
    case 'Periodikum (net)':
      $subtype = t('Periodikum (net)');
      break;
    case 'Plakat':
      $subtype = t('Plakat');
      break;
    case 'Planche':
      $subtype = t('Planche');
      break;
    case 'Playstation':
      $subtype = t('Playstation');
      break;
    case 'Playstation 2':
      $subtype = t('Playstation 2');
      break;
    case 'Playstation 3':
      $subtype = t('Playstation 3');
      break;
    case 'Postkort':
      $subtype = t('Postkort');
      break;
    case 'PSP':
      $subtype = t('PSP');
      break;
    case 'Punktskrift':
      $subtype = t('Punktskrift');
      break;
    case 'Puslespil':
      $subtype = t('Puslespil');
      break;
    case 'Sammensat materiale':
      $subtype = t('Sammensat materiale');
      break;
    case 'Sang':
      $subtype = t('Sang');
      break;
    case 'Serie':
      $subtype = t('Serie');
      break;
    case 'Spil':
      $subtype = t('Spil');
      break;
    case 'Spolelydbånd':
      $subtype = t('spolelydbånd_placeholder', array(), array('context' => 'ting_openformat'));
      break;
    case 'Symbolkort':
      $subtype = t('Symbolkort');
      break;
    case 'Teateropførelse':
      $subtype = t('Teateropførelse');
      break;
    case 'Tegneserie':
      $subtype = t('Tegneserie');
      break;
    case 'Tegning':
      $subtype = t('Tegning');
      break;
    case 'Teknisk tegning':
      $subtype = t('Teknisk tegning');
      break;
    case 'Tidsskrift':
      $subtype = t('Tidsskrift');
      break;
    case 'Tidsskrift (net)':
      $subtype = t('Tidsskrift (net)');
      break;
    case 'Tidsskriftsartikel':
      $subtype = t('Tidsskriftsartikel');
      break;
    case 'Transparent':
      $subtype = t('Transparent');
      break;
    case 'Udstilling':
      $subtype = t('Udstilling');
      break;
    case 'Udstillingsmontage':
      $subtype = t('Udstillingsmontage');
      break;
    case 'Video':
      $subtype = t('Video');
      break;
    case 'Wii':
      $subtype = t('Wii');
      break;
    case 'Xbox':
      $subtype = t('Xbox');
      break;
    case 'Xbox 360':
      $subtype = t('Xbox 360');
      break;
    case 'Øvelsesmodel':
      $subtype = t('Øvelsesmodel');
      break;
    case 'Årbog':
      $subtype = t('Årbog');
      break;
  }
  return array('type' => $type, 'subtype' => $subtype);
}
