<?php

/**
 * Define constant cql operators
 */
define('CQL_AND', ' and ');
define('CQL_OR', ' or ');
define('CQL_NOT', ' not ');

// load search info and hooks
module_load_include('inc', 'ting_openformat', 'ting_openformat.search');
module_load_include('inc', 'ting_openformat', 'ting_openformat.entities');
module_load_include('inc', 'ting_openformat', 'ting_openformat.field_definitions');
module_load_include('inc', 'ting_openformat', 'ting_openformat.field');
module_load_include('inc', 'ting_openformat', 'ting_openformat_feeds');

function ting_openformat_menu() {
  $items = array();
  $items['work/%'] = array(
    'title' => 'Single work',
    'description' => 'View single work',
    'page arguments' => array(1),
    'page callback' => 'ting_openformat_single',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['ajax/load_more_results'] = array(
    'title' => 'Load more results AJAX callback',
    'description' => 'AJAX callback for ting_openformat_load_more_results. Loads X number of searchresults and returns the result to the client as JSON.',
    'access arguments' => array('access content'),
    'page callback' => 'ting_openformat_load_more_results_ajax_callback',
    'file' => 'ting_openformat_load_more.inc',
    'file path' => drupal_get_path('module', 'ting_openformat') . '/plugins/content_types/',
    'type' => MENU_CALLBACK,
  );

  $items['ting_openformat/full_view'] = array(
    'title' => 'Full view callback',
    'description' => 'Callback for full view button',
    'page callback' => 'ting_openformat_load_full_view',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ting_openformat/ajax/manifestations'] = array(
    'title' => 'Single work',
    'description' => 'View single work',
    'page arguments' => array(1),
    'page callback' => 'ting_openformat_ajax_manifestations',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/ting'] = array(
    'title' => 'Openformat',
    'description' => 'Handle ting_openformat module (disable)',
    'position' => 'left',
    'weight' => 1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ting_openformat'] = array(
    'title' => 'Openformat',
    'description' => 'Handle ting_openformat module (disable)',
    'position' => 'left',
    'weight' => 1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ting/disable'] = array(
    'title' => 'Disable this module',
    'description' => 'Delete virtual fields from this module and disable it',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_openformat_admin_module_disable'),
    'access arguments' => array('administer webservices settings'),
    'file' => 'ting_openformat.admin.inc'
  );
  $items['admin/config/ting/order'] = array(
    'title' => 'Set Type Order',
    'description' => 'Set the order of the different types in a subwork',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_openformat_type_order_form'),
    'access arguments' => array('administer webservices settings'),
    'file' => 'ting_openformat.admin.inc'
  );

  $items['ting_openformat/ajax/facets'] = array(
    'title' => 'facets',
    'description' => 'Get facets by ajax',
    'page callback' => 'ting_openformat_facets_by_ajax',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_bibdk_usersettings_user_tabs
 * @return array
 */
function ting_openformat_bibdk_usersettings_user_tabs() {
  $tab['view'] = array(
    'title' => t('view'),
    'description' => t('usersettings_tab_view_description'),
    'weight' => 10,
  );

  return $tab;
}

/**
 * Implements hook_bibdk_usersettings_user_settings
 * @return array
 */
function ting_openformat_bibdk_usersettings_user_settings() {

  $form['view']['ting_openformat_fullview_usersetting'] = array(
    '#type' => 'checkbox',
    '#title' => t('Prefer full view'),
    '#default_value' => bibdk_usersettings_user_settings_get('ting_openformat_fullview_usersetting', FALSE),
  );

  $form['view'] += array(
    '#type' => 'container',
    '#weight' => 0,
    '#tab' => 'view',
  );

  return $form;
}

/** Implements hook_language_switch_links_alter. Add query parameters to link
 * to keep search result when switching language on search page
 * @param array $links
 * @param $type
 * @param $path
 */
function ting_openformat_language_switch_links_alter(array &$links, $type, $path) {
  // Get query parameters
  $query = drupal_get_query_parameters();
  foreach (
    $links as &$link) {
    $link['query'] = $query;
  }
}

function ting_openformat_facets_by_ajax() {
  $by_ajax = variable_get('ding_facetbrowser_by_ajax', FALSE);
  if($by_ajax){
    $client = new ting_client_class();
    $params = $_SESSION['latest_search']['params'];
    $results = new stdClass();
    $results->search_key = $_SESSION['latest_search']['search_key'];
    $results->cacheKey = $_SESSION['latest_search']['cache_key'];
    _ting_openformat_facet_cache($client, $results, $params);
  }

  $markup = theme('facetbrowser', array($results->facets, (!empty($results->search_key) ? $results->search_key : NULL)));

  drupal_json_output(array('markup'=>$markup));
  drupal_exit();
}

/**
 * AJAX callback for full_view.
 * full_view comes as a POST paramter to avoid the parameter being present in the URL
 */
function ting_openformat_load_full_view() {
  $_SESSION['search_settings']['full_view'] = isset($_POST['full_view']) ? (bool) $_POST['full_view'] : FALSE;
  drupal_json_output(drupal_json_encode('success'));
}

/** Load manifestations and insert into placeholder via AJAX
 * @param $type
 * @param $json json encoded manifestation ids
 * @return json|false
 */
function ting_openformat_ajax_manifestations($type, $json) {
  $commands = array();
  $manifestation_ids = json_decode($json);

  if (!is_array($manifestation_ids) || count($manifestation_ids) == 0) {
    return FALSE;
  }

  $bibdkEntity = ting_openformat_get_manifestations($manifestation_ids);

  if (!isset($bibdkEntity) || count($bibdkEntity) == 0) {
    return FALSE;
  }

  $bibdkEntity = reset($bibdkEntity);
  $manifestations = $bibdkEntity->manifestations;

  if (!isset($manifestations) || count($manifestations) == 0) {
    return FALSE;
  }

  foreach ($manifestations as $manifestation) {
    $view = drupal_render(ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL));
    $commands[] = array(
      'command' => 'add_manifestations',
      'selector' => '[data-id=' . $manifestation->id . ']',
      'data' => $view,
    );
  }
  ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
}

/**
 * View single work
 */
function ting_openformat_single($id) {
  drupal_set_title('');
  $bibdkEntity = ting_openformat_get_manifestations($id);
  if (!isset($bibdkEntity) || count($bibdkEntity) == 0) {
    return t('no_work_found');
  }
  $bibdkEntity = reset($bibdkEntity);
  $manifestation = reset($bibdkEntity->manifestations);

  $host_publication = $manifestation->getHostPublication();

  $part_of = NULL;
  if (isset($host_publication)) {
    $markup = _ting_openformat_get_markup_for_field($host_publication);
    $part_of = drupal_render($markup);
  }

  $creator = _ting_openformat_get_markup_for_field($bibdkEntity->getCreator());

  $creatorDisplay = $bibdkEntity->getCreatorDisplay();
  $title = !empty($creatorDisplay) ? $bibdkEntity->getTitle() . ' - ' . $creatorDisplay : $bibdkEntity->getTitle();

  drupal_set_title($title);

  $abstract = _ting_openformat_parse_element($bibdkEntity->getAbstract());

  $meta_description = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'description',
        'content' => $abstract,
    )
  );
  drupal_add_html_head( $meta_description, 'meta_description' );

  $render = array(
    '#theme' => 'ting_openformat_single_work',
    '#title' => $bibdkEntity->getTitle(),
    '#partOf' => $part_of,
    '#author' => drupal_render($creator),
    '#ids' => $id,
    '#work' => ting_openformat_work_view($bibdkEntity),
  );
  return drupal_render($render);
}

/** implements hook_preprocess_page()
 * - Remove content region if no results
 * - Remove H1 title from work pages
 *
 * @param $variables
 */
function ting_openformat_preprocess_page(&$variables) {
  if (in_array('page__search__work', $variables['theme_hook_suggestions'])) {
    $search_result = drupal_static('ting_search_results');
    if (!isset($search_result) || $search_result->numTotalObjects == 0) {
      unset($variables['page']['content']);
    }
  }
  else if ($variables['theme_hook_suggestions'][0] == 'page__work') {
    $variables['title'] = FALSE;
  }
}

/**
 * @param array $ids
 * @param array $params
 * @return array
 */
function ting_openformat_get_manifestations($ids, $params = array()) {
  $client = new ting_client_class();
  $default_params['objectFormat'] = variable_get('ting_search_openformat', 'bibliotekdkWorkDisplay');
  $default_params['objectId'] = $ids;
  $default_params['includeHoldingsCount'] = TRUE;
  drupal_alter('ting_openformat_getobject_params', $default_params);
  $params += $default_params;
  $result = $client->do_request('object', $params);

  if (empty($result->collections)) {
    return array();
  }
  else {
    return ting_openformat_pre_parse_manifestations($result);
  }
}

/**
 * @param stdClass $result
 * @return mixed
 */
function ting_openformat_pre_parse_manifestations($result) {
  $openformat = array();

  /* @var $TingClientObjectCollection TingClientObjectCollection */
  foreach ($result->collections as $TingClientObjectCollection) {
    /* @var $formattedCollection TingClientFormattedCollection */
    $formattedCollection = $TingClientObjectCollection->getFormattedCollection();

    if (is_a($formattedCollection, 'TingClientFormattedCollection')) {
      $manifestation = $formattedCollection->getWorkDisplay()->manifestation;
    }
    else {
      watchdog('ting_openformat', 'Expected object of type TingClientFormattedCollection - got %type', array('%type' => gettype($formattedCollection)), WATCHDOG_ERROR);
    }

    /* @var $TingClientObject TingClientObject */
    foreach ($TingClientObjectCollection->getObjects() as $TingClientObject) {
      $relationsData = isset($TingClientObject->relationsData) ? $TingClientObject->relationsData : NULL;
    }
    if (isset($relationsData)) {
      $manifestation->relationsData = $relationsData;
    }
    $openformat[] = $manifestation;
  }

  $entity = _ting_openformat_get_bibdk_work_entity($openformat);

  return $entity;
}

/**
 * @param $openformat
 * @return mixed
 */
function _ting_openformat_get_bibdk_work_entity($openformat) {
  $original_manifestations = array();
  $entity_ids = array();
  _ting_openformat_parse_manifestations($original_manifestations, $entity_ids, $openformat);
  $conditions['manifestations'] = $original_manifestations;

  return entity_load('bibdkWorkEntity', $entity_ids, $conditions, TRUE);
}

/**
 * Get a single manifestation from a pid
 *
 * @param $pid
 * @return Manifestation
 */
function ting_openformat_get_single_manifestation($pid) {
  /* @var $work BibdkWork */
  $work = reset(ting_openformat_get_single($pid));
  $manifestation = reset($work->getManifestations());
  return $manifestation;
}

/**
 * @param $id
 * @return null|string
 */
function ting_openformat_get_single($id) {
  $params = array();
  $params['objectId'] = $id;
  $params['objectFormat'] = variable_get('ting_search_openformat', 'bibliotekdkWorkDisplay');
  $params['includeHoldingsCount'] = TRUE;
  $params['relationData'] = 'uri';

  $client = new ting_client_class();
  $result = $client->do_request('object', $params);

  if (isset($result->collections) && count($result->collections) > 0) {
    /* @var $collection TingClientObjectCollection */
    $collection = $result->collections[0];
    $openformat[] = $collection->getFormattedCollection()->getWorkDisplay()->manifestation;
  }

  if (empty($openformat)) {
    return t("work with id $id could not be found");
  }

  $original_manifestations = array();
  $entity_ids = array();
  _ting_openformat_parse_manifestations($original_manifestations, $entity_ids, $openformat);

  // conditions array is deprecated in drupal 8.
  $conditions['manifestations'] = $original_manifestations;

  $entity = entity_load('bibdkWorkEntity', $entity_ids, $conditions, TRUE);

  return $entity;
}

function _ting_openformat_parse_manifestations(&$original_manifestations, &$entity_ids, $openformat) {
  if (isset($openformat) && is_array($openformat) && !empty($openformat)) {
    foreach ($openformat as $manifestation) {
      $manifestation_id = isset($manifestation->adminData->pid->{'$'}) ? $manifestation->adminData->pid->{'$'} : NULL;
      $entity_ids[] = $manifestation_id;
      $original_manifestations[$manifestation_id] = $manifestation;
    }
  }
}

function ting_openformat_form_search_block_form_alter(&$form, &$form_state, $form_id) { // rebuild
  $form['search_block_form']['#default_value'] = drupal_static('ting_search_query');
}

/**
 * Implements hook_form_FORMID_alter (ting_client_admin_webservices_settings
 *
 * @see ting_client.admin.inc).
 * make openformat a dropdownlist.
 * add bibliotekdkWorkDisplay to ting_admin form
 */
function ting_openformat_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state) {
  if (isset($form['webservices']['ting_search_openformat'])) {
    $dkabm = $form['webservices']['ting_search_openformat']['#default_value'];
    $element = & $form['webservices']['ting_search_openformat'];
    // change type to select
    $element['#type'] = 'select';
    // set the original option (dkabm)
    $element['#options']['dkabm'] = 'dkabm';
    // add bibliotekdkWorkDisplay to options
    $element['#options']['bibliotekdkWorkDisplay'] = 'bibliotekdkWorkDisplay';
  }
}

/**
 * Load hook as set in entity_info
 * load hook is not currently used .. maybe later.
 */
function ting_openformat_manifestations_load($stdObjects) {
  $ret = array();

  return $ret;
}

/**
 * uri callback as defined in hook_entity_info
 * */
function ting_openformat_maniobject_uri() {
  return 'Brønd';
}

/* * *********  panel-pages *************** */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_openformat_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function ting_openformat_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/* * ************** end panel-pages ************** */

/** Implements hook_ding_devel_timers
 */
function ting_openformat_ding_devel_timers() {
  return array(
    'search_client' => array(
      'title' => 'Search client total request time was @time ms.',
    ),
    'search_client_net' => array(
      'title' => 'Search client net time was @time ms.',
      'include in total' => FALSE,
    )
  );
}

/* * *********** VIEWS ************* */

/*
 * preprocess template to add stylesheet
 * @TODO; this method is for developing only - move and adjust css to proper file when ready
 */

function template_preprocess_ting_openformat_subwork_tabs(&$variables) {
  $path = drupal_get_path('module', 'ting_openformat') . '/css';
  drupal_add_css($path . '/ting_openformat_subwork.css');
}

/**
 * Creates html view for bibdkWorkEntity
 * @param Manifestation|BibdkWork|BibdkSubwork|BibdkCollection $bibdkWork
 * @param string $view_mode
 * @param null $langcode
 * @return string
 */
function ting_openformat_work_view($bibdkWork, $view_mode = 'full', $langcode = NULL) {
  if (!is_object($bibdkWork)) {
    return;
  }
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  $work_fields = array();
  $work_fields += _prepare_view('bibdkWorkEntity', $bibdkWork, $view_mode, $langcode);

  $subWorks = $bibdkWork->getSubWorks();

  $ordered_subworks = ting_openformat_get_ordered_subworks($subWorks);

  $ding_id = preg_replace('/[^a-zA-Z0-9]+/', '', $bibdkWork->id);
  $render_tabs = array(
    '#theme' => 'ting_openformat_subwork_tabs',
    '#subWorks' => $ordered_subworks,
    '#ding_id' => $ding_id,
  );
  $tabs = drupal_render($render_tabs);

  $render = array(
    '#theme' => 'ting_openformat_work',
    '#fields' => $work_fields,
    '#subWorks' => $ordered_subworks,
    '#tabs' => $tabs,
    '#ding_id' => $ding_id
  );
  return drupal_render($render);
}

/** Get Subworks ordered by type and subtype
 * @param $subWorks
 * @return mixed
 */
function ting_openformat_get_ordered_subworks($subWorks) {
  $sub = array();
  foreach ($subWorks as $id => $subWork) {
    $type = drupal_strtolower($subWork->getType());
    $subtype = $subWork->getSubType();
    $sub[$type][$subtype] = ting_openformat_subwork_view($subWork);
  }

  foreach ($sub as $type => $value) {
    foreach ($value as $subtype => $val) {
      $subtype_id = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $subtype));
      // Context is added for subtype to reuse translations.
      //There is no context on type because this would clear existing translations
      $trans = array('type' => t($type), 'subtype' => t($subtype, array(), array('context' => 'material_type')));

      $type_id = $trans['type'];
      $ordered_subworks[$type_id][$subtype_id]['manifest'] = $val;
      $ordered_subworks[$type_id][$subtype_id]['translation'] = $trans;
      $ordered_subworks[$type_id][$subtype_id]['manifest']['subtype_actions'] = module_invoke_all('ting_openformat_subwork_materialtype_actions', $ordered_subworks, $type_id, $subtype_id, $val['bibdkSubwork']);
    }
  }

  return $ordered_subworks;
}

/**
 * Creates html view for bibdkSubwork
 * @param BibdkSubwork $bibdkSubwork
 * @param string $view_mode
 * @param null $langcode
 * @return mixed
 */
function ting_openformat_subwork_view($bibdkSubwork, $view_mode = 'full', $langcode = NULL) {
  $sub['fields'] = _prepare_view('bibdkSubwork', $bibdkSubwork, $view_mode, $langcode);
  $sub['bibdkSubwork'] = $bibdkSubwork;
  foreach ($bibdkSubwork->getManifestations() as $manifestation) {
    if (get_class($manifestation) == 'Manifestation') {
      // first element is parsed
      $manifestation_view = ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL);
    }
    else {
      // other elements are given a container
      $manifestation_view = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => 'manifestation-container',
          'data-id' => $manifestation->id,
        ),
      );
      // container for the remaining
    }
    $sub['manifestations'][$manifestation->id] = drupal_render($manifestation_view);
  }

  return $sub;
}


/**
 * Generates the collection view with an 'Order any edition' button if view is
 * implemented (requires bibdk_reservation module)
 *
 * If $_SESSION['search_settings']['full_view'] is TRUE the generated will be a
 * full view with all information visible.
 *
 * @param BibdkCollection $bibdkobject
 * @return string
 */
function ting_openformat_collection_view($bibdkobject) {
  $all_ids_in_collection = $bibdkobject->getCollectionIds();
  $uid = strtolower(strtr(reset($all_ids_in_collection), array(
    ':' => '',
    '-' => '',
    '_' => ''
  )));

  $trackId = ting_openformat_set_tracking_id();

  if(bibdk_usersettings_user_settings_get('ting_openformat_fullview_usersetting', FALSE)){
    $_SESSION['search_settings']['full_view'] = TRUE;
  }

  //Setting parameters based on a full or short view was requeseted
  if ((isset($_SESSION['search_settings']['full_view']) && $_SESSION['search_settings']['full_view'] == TRUE)) {
    $showinfoForm = '';
    $workOne = ting_openformat_load_single_full_work($bibdkobject, $all_ids_in_collection, $uid);
  }
  else {
    $form = drupal_get_form('ting_openformat_show_info_get_form', $bibdkobject, $uid, $trackId);
    $showinfoForm = drupal_render($form);
    $workOne = NULL;
  }

  $actions = _prepare_view('bibdkCollection', $bibdkobject, 'full', NULL);
  $workType = $bibdkobject->getWorkType();
  $type = $bibdkobject->getType();
  $types_classes = _ting_openformat_get_types_list($bibdkobject);

  $togglework = theme('ting_openformat_toggle_work', array(
    'uid' => $uid,
    'showinfo' => $showinfoForm,
    'full_view' => !is_null($workOne),
  ));

  return theme('ting_openformat_collection', array(
    'title' => check_plain($bibdkobject->getTitle()),
    'title_full' => check_plain($bibdkobject->getTitleFull()),
    'language' => check_plain($bibdkobject->getLanguageForBriefDisplay()),
    'partOf' => check_plain($bibdkobject->getPartOf()),
    'author' => check_plain($bibdkobject->getAuthor()),
    'work_type' => (!empty($workType)) ? 'type-' . $workType : 'type-undefined',
    'type' => $type,
    'ids' => implode(',', $all_ids_in_collection),
    'togglework' => $togglework,
    'work_one' => $workOne,
    'uid' => $uid,
    'actions' => (!empty($actions)) ? $actions : array(),
    'types' => $types_classes,
  ));
}

/**
 * Set tracking parameter in url. If trackingId is already set
 * append gui specific track. Else create tracking id for webservices.
 *
 * trackingid := $_GET['ẗrackingId'] . ':' . [number of collection on page]
 *
 * @TODO add a timestamp?
 *
 * @staticvar string $trackingId
 * @staticvar int $collectionCount
 * @return string
 */
function ting_openformat_set_tracking_id() {
  static $trackingId;
  static $collectionCount;

  if (!isset($trackingId)) {
    if (isset($_GET['trackingId'])) {
      $trackingId = $_GET['trackingId'];
    }
    else {
      $trackingId = '';
    }
  }

  if (!isset($collectionCount)) {
    $collectionCount = 0;
  }
  $collectionCount++;

  $trackId = $trackingId;
  if (strlen($trackId) > 1) {
    $trackId .= ':';
  }

  $trackId .= 'bibdkGui_' . $collectionCount;

  return $trackId;
}

/**
 * Genrates a list with classes based on the material types in the given
 * collection
 *
 * @param BibdkCollection $bibdkobject
 * @return String html
 */
function _ting_openformat_get_types_list($bibdkobject) {
  $types = $bibdkobject->getCollectionWorkTypes();
  $items = array();
  foreach ($types as $type => $ids) {
    $items[$type] = '<span class="materialtype ' . $type . '-icon-small " title="' . t($type) . '">' . t($type) . '&nbsp;</span>';
  }

  if ($bibdkobject->isOnline()) {
    $items['net-icon-small'] = '<span class="materialtype online-icon-small" title="' . t('online') . '">' . t('online') . '&nbsp;</span>';
  }

  $list = array(
    '#type' => 'ol',
    '#theme' => 'item_list',
    '#items' => $items,
    '#attributes' => array(
      'class' => 'material-types-list',
    ),
  );


  return drupal_render($list);
}

/**
 * Generates form for 'View more info' on search results page
 *
 * @param $form
 * @param array $form_state
 * @param BibdkCollection $bibdkObject
 * @param $uid
 * @param int $trackId
 * @return array
 */
function ting_openformat_show_info_get_form($form, $form_state, $bibdkObject, $uid, $trackId = 0) {
  $all_ids_in_collection = $bibdkObject->getCollectionIds();
  $form['info'] = array(
    '#trackId' => $trackId,
    '#type' => 'button',
    '#value' => '',
    '#ids' => $all_ids_in_collection,
    '#uid' => $uid,
    '#collection' => $bibdkObject,
    '#id' => 'work_' . $uid,
    '#prefix' => "<span id='ajax-$uid'>",
    '#suffix' => "</span>",
    '#attributes' => array('class' => array('visuallyhidden')),
    '#ajax' => array(
      'callback' => 'ting_openformat_show_info_ajax_callback',
      'wrapper' => 'ajax_placeholder_' . $uid,
      'method' => 'replace',
      'event' => 'click',
    ),
  );

  return $form;
}

/**
 * Ajax callback. Called when user clicks 'view more information' on a work on search results page
 *
 * @param type $form
 * @param type $form_state
 * @return type
 */
function ting_openformat_show_info_ajax_callback(&$form, $form_state) {
  $ids = $form_state['clicked_button']['#ids'];
  $uid = $form_state['clicked_button']['#uid'];
  $collection = $form_state['clicked_button']['#collection'];

  $tracking_id = $form_state['clicked_button']['#trackId'];

  $view = ting_openformat_load_single_full_work($collection, $ids, $uid, $tracking_id);

  $view = theme('status_messages') . $view;

  $commands = array();
  $commands[] = ajax_command_remove("#ajax-$uid");
  $commands[] = ajax_command_replace(NULL, $view);

  return array('#type' => 'ajax', '#commands' => $commands);
}


/**
 * @param BibdkCollection $collection
 * @param $ids
 * @param $uid
 * @param int $tracking_id
 * @return string
 */
function ting_openformat_load_single_full_work($collection, $ids, $uid, $tracking_id = 0) {
  module_invoke_all('show_manifestation_info_prerender', $ids, $uid);

  foreach ($collection->manifestations as $manifestation) {
    $briefDisplay = new BibdkBriefDisplay($manifestation);
    if (!isset($bibdkWork)) {
      if ($bibdkWork = $collection->getWorkOne()) {
        $bibdkWork = _ting_openformat_get_bibdk_work_entity(array($bibdkWork));
      }
      else {
        $bibdkWork = ting_openformat_get_manifestations($briefDisplay->id, array('trackingId' => $tracking_id));
      }

      $bibdkWork = current($bibdkWork);

      /*
       * If manifestation with $briefDisplay->id does not exists, the result
       * from openSearch is not rendered correctly and we send a message to the
       * user that the object could not be shown, and log it to the watchdog
       * */
      if (!isset($bibdkWork->manifestations[$briefDisplay->id])){

        drupal_set_message(t('This record could not be generated properly. A message have been send to the site administrators', array(), array('context' => 'ting_openformat')), 'warning');
        watchdog('ting_openformat', 'ERROR manifestation with id @id failed generate bibdkWorkDisplay', array('@id' => $briefDisplay->id), WATCHDOG_ERROR);
        return;
      }

      $bibdkWork->manifestations[$briefDisplay->id]->setBriefDisplayType($briefDisplay->gettype());
      $bibdkWork->manifestations[$briefDisplay->id]->setSubType($briefDisplay->getSubtype());
    }
    else {
      $bibdkWork->manifestations[$briefDisplay->id] = $briefDisplay;
    }
  }

  return ting_openformat_work_view($bibdkWork);
}


/**
 * @param $manifestation
 * @param string $view_mode
 * @param null $langcode
 * @return array
 */
function ting_openformat_manifestation_view($manifestation, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  $fields = _prepare_view('bibdkManifestation', $manifestation, $view_mode, $langcode);

  $actions = ting_openformat_get_actions('bibdkManifestation', $manifestation, $view_mode, $langcode);

  $build = array(
    '#theme' => 'ting_openformat_manifestation',
    '#view_mode' => $view_mode,
    '#language' => $langcode,
    '#fields' => $fields,
    '#actions' => $actions,
  );

  return $build;
}

/**
 * Create view for manifestation volume fields
 * @param $volume
 * @param string $view_mode
 * @param null $langcode
 * @return bool|string
 */
function ting_openformat_volume_view($volume, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  $field_content = _prepare_view('bibdkManifestationVolume', $volume, $view_mode, $langcode);

  return drupal_render($field_content);
}

/**
 * Create view for manifestation section fields
 * @param $volume
 * @param string $view_mode
 * @param null $langcode
 * @return bool|string
 */
function ting_openformat_section_view($volume, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  $field_content = _prepare_view('bibdkManifestationSection', $volume, $view_mode, $langcode);

  return drupal_render($field_content);
}

/**
 * attach entity fields to a single entity. Return a renderable array
 * @param $entity_type
 * @param Manifestation|BibdkWork|BibdkSubwork|BibdkCollection $object
 * @param $view_mode
 * @param $langcode
 * @return array
 */
function _prepare_view($entity_type, $object, $view_mode, $langcode) {
  field_attach_prepare_view($entity_type, array($object->id => $object), $view_mode, $langcode);
  entity_prepare_view($entity_type, array($object->id => $object), $langcode);
  $fields = field_attach_view($entity_type, $object, $view_mode, $langcode);

  return $fields;
}

/* * ********* END VIEWS ********** */


/** Invokes hook_ting_openformat_actions
 * @param $type
 * @param $entity
 * @param string $view_mode
 * @param null $langcode
 * @return array
 */
function ting_openformat_get_actions($type, $entity, $view_mode = 'full', $langcode = NULL) {

  $actions = module_invoke_all('ting_openformat_actions', $type, $entity, $view_mode, $langcode);

  if (!empty($actions)) {
    uasort($actions, 'element_sort');
  }

  return $actions;
}

/**
 * @param array $a
 * @param array $b
 * @return Boolean
 */
function _ting_openformat_sortfields_by_weight($a, $b) {
  return $a['#weight'] - $b['#weight'];
}

/* * ***************** ADMIN **************** */

/**
 * Impelments hook_flush_caches
 * */
function ting_openformat_flush_caches() {
  return array('cache_bibdk_webservices');
}

/* * * FACETBROWSER *** */

/**
 * Implements hook_ding_facetbrowser().
 * initialize facetbrowser
 */
function ting_openformat_ding_facetbrowser() {
  $results = new stdClass();
  $results->show_empty = FALSE;
  $search_result = drupal_static('ting_search_results');


  if ($search_result) {
    $results->facets = ($search_result instanceof TingClientSearchResult) ? $search_result->facets : array();
    $results->searchkey = $search_result->search_key;

    return $results;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * add menu item on admin/structure .. maybe this can be done via EntityDefaultUIController --
 *
 * @see entity module
 *
 * Adjusts the menu so that the field subtab becomes the default local task,
 * to avoid having an useless placeholder page.
 */
function ting_openformat_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    if (isset($items['admin/structure/bibdkWork/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/bibdkWork'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Work entity for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/bibdkWork/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/manifestations/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/manifestations'] = $items['admin/structure/manifestations/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/manifestations'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'manifestations for bibliotek.dk';
      $item['description'] = 'Manage work display.';

      $items['admin/structure/manifestations/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/subworks/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/subworks'] = $items['admin/structure/subworks/fields'];
      //$items['admin/structure/bibdkWork'] = $items['admin/structure/bibdkWork'];
      $item = & $items['admin/structure/subworks'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Subworks for bibliotek.dk';
      $item['description'] = 'Manage subwork display.';

      $items['admin/structure/subworks/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/collection/fields'])) {
      $items['admin/structure/collection'] = $items['admin/structure/collection/fields'];
      $item = & $items['admin/structure/collection'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Collections for bibliotek.dk';
      $item['description'] = 'Manage collection display.';

      $items['admin/structure/collection/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 3,
      );
    }
    if (isset($items['admin/structure/manifestation/volume/fields'])) {
      $items['admin/structure/manifestation/volume'] = $items['admin/structure/manifestation/volume/fields'];
      $item = & $items['admin/structure/manifestation/volume'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Manifestation Volume for bibliotek.dk';
      $item['description'] = 'Manage Volume display.';

      $items['admin/structure/manifestation/volume/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 2,
      );
    }
    if (isset($items['admin/structure/manifestation/section/fields'])) {
      $items['admin/structure/manifestation/section'] = $items['admin/structure/manifestation/section/fields'];
      $item = & $items['admin/structure/manifestation/section'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Manifestation Section for bibliotek.dk';
      $item['description'] = 'Manage Section display.';

      $items['admin/structure/manifestation/section/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
  }
}

/**
 * Fetch known types from the datawell.
 */
function _ting_openformat_fetch_types() {
  $types = variable_get('ting_openformat_types', array());

  $options = array(
    'facets' => array('facet.type'),
    'numFacets' => 99,
    'reply_only' => TRUE,
    'sort' => 'random',
    'query' => "*=*",
    'start' => 0,
    'numResults' => 0,
    'agency' => variable_get('ting_agency'),
    'objectFormat' => variable_get('ting_search_openformat', 'dkabm'),
    'profile' => variable_get('ting_search_profile', FALSE)
  );

  $client = new ting_client_class();
  $result = $client->do_request('search', $options);

  foreach ($result->facets['facet.type']->terms as $term => $count) {
    if (!isset($types[$term])) {
      $types[$term] = array(
        "type" => $term,
        "count" => $count,
        "weight" => 1000
      );
    }
  }

  // Only save if we actually got any types.
  if (!empty($types)) {
    variable_set('ting_openformat_types', $types);
  }
}

/*************** ENTITY *****************/
/**
 * Implements hook_entity_info
 * for bibdk we need 3 entities: work, subwork and manifestation
 **/
function ting_openformat_entity_info() {
  $return = array(
    'bibdkManifestation' => array(
      'label' => t('openformat manifestation'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation',
      'description' => t('openformat fields'),
      'controller class' => 'ManifestionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestation' => array(
          'label' => 'openformat manifestation',
          'admin' => array(
            'path' => 'admin/structure/manifestations',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => TRUE,
        ),
        'reservation' => array(
          'label' => t('Reservation'),
          'custom settings' => TRUE,
        ),
      ),
    ),
    'bibdkManifestationVolume' => array(
      'label' => t('Manifestation Volume'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation_volume',
      'description' => t('Manifestation volume fields'),
      'controller class' => 'ManifestationVolumeEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestationVolume' => array(
          'label' => 'Manifestation volume fields',
          'admin' => array(
            'path' => 'admin/structure/manifestation/volume',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkManifestationSection' => array(
      'label' => t('Manifestation Section'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_manifestation_section',
      'description' => t('Manifestation section fields'),
      'controller class' => 'ManifestationSectionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkManifestationSection' => array(
          'label' => 'Manifestation section fields',
          'admin' => array(
            'path' => 'admin/structure/manifestation/section',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkCollection' => array(
      'label' => t('Bibdk collection'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_collection',
      'description' => t('Bibdk collection'),
      'controller class' => 'CollectionEntityApiController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkCollection' => array(
          'label' => 'openformat collection',
          'admin' => array(
            'path' => 'admin/structure/collection',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => TRUE,
        ),
      ),
    ),
    'bibdkSubwork' => array(
      'label' => t('Subwork'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_subwork',
      'description' => t('Manifestations grouped by type'),
      'controller class' => 'subWorkEntityAPIController',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkSubwork' => array(
          'label' => t('Subwork'),
          'admin' => array(
            'path' => 'admin/structure/subworks',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
    'bibdkWorkEntity' => array(
      'label' => t('Bibdk entity placeholder for manifestations'),
      'fieldable' => TRUE,
      'base table' => 'ting_openformat_manifestation',
      'ding_entity_type' => 'bibdk_entity',
      'controller class' => 'bibdkEntityApiController',
      'load hook' => 'manifestations_load',
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'bundles' => array(
        'bibdkWorkEntity' => array(
          'label' => 'bibdkWorkEntity',
          'admin' => array(
            'path' => 'admin/structure/bibdkWork',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    )
  );

  return $return;
}

/****************** END ENTITY ****************/
