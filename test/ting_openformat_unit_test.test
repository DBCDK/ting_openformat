<?php

/**
 * Test class for ting_openformat
 */
class TingOpenFormatUnitTestCase extends DrupalUnitTestCase {
  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Ting OpenFormat Unittest'),
      'description' => t('Tests the methods of the different entities'),
      'group' => t('Ting Openformat'),
    );
  }

  public function setUp() {
    module_load_include('inc', 'ting_openformat', 'lib/ManifestationMaster');
    module_load_include('inc', 'ting_openformat', 'ting_openformat.entities');
    module_load_include('inc', 'ting_openformat', 'lib/BibdkCollection');
    module_load_include('php', 'ting_openformat', 'test/test_results');
    module_load_include('inc', 'ting_openformat', 'ting_openformat.field_definitions');
    parent::setUp();
  }

  public function testManifestationMethods() {
    $fields = ting_openformat_bibdk_fields();
    $_ting_openformat_test_results = ting_openformat_test_results();

    foreach ($_ting_openformat_test_results as $field_name => $field) {
      $this->assertTrue(isset($fields[$field_name]), $field_name . ' is present in field definitions.');
      $this->assertTrue(isset($fields[$field_name]['label']), $field_name . ' has label in field definitions.');
      $this->assertTrue(isset($fields[$field_name]['entity_type']) && is_array($fields[$field_name]['entity_type']), $field_name . ' has entity_type of type array in field definitions.');
      $display = isset($fields[$field_name]['display']) && is_array($fields[$field_name]['display']);
      $custom_display = isset($fields[$field_name]['custom_display']) && is_array($fields[$field_name]['custom_display']);
      $this->assertTrue($display || $custom_display, $field_name . ' has display or custom_display of type array in field definitions.');
      $this->assertTrue(isset($fields[$field_name]['description']), $field_name . ' has description of type array in field definitions.');
      $this->assertTrue(isset($fields[$field_name]['callback method']), 'Callback method is present in field definition: ' . $field_name);
      $method = $field['method'];
      $this->assertTrue($fields[$field_name]['callback method'] === $method, $method . ' is implemented.');
      $expected = $field['_ting_openformat_default_field_view_content'];
      $manifestation = $this->_createObjects();
      $result = $manifestation->$method();
      $this->assertEqual($expected, $result, $method . '() returns expected result for definition: '. $field_name);
    }
  }
  
  /** Test that trackingId is set properly
   * 
   */
  public function testTrackingId(){
    $_GET = array('trackingId'=>'TESTHEST');
    for( $i=0; $i < 10; $i++){
      $trackId = ting_openformat_set_tracking_id();
    }
    $this->assertEqual('TESTHEST:bibdkGui_10', $trackId,'TrackingId '.$trackId.' is set correct');
  }
  
  

  public function testCqlCommando() {
    global $language;

    $saved_language = $language;

    $language->language = 'en';

    // Test English - AND
    $result = ting_openformat_get_cql_commando('AND');
    $expected = ' AND ';
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');

    // Test English - OR
    $result = ting_openformat_get_cql_commando('OR');
    $expected = ' OR ';
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');

    // Test English - NON VALID
    $result = ting_openformat_get_cql_commando('FAIL');
    $expected = NULL;
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');


    $language->language = 'da';

    // Test Danish - AND
    $result = ting_openformat_get_cql_commando('AND');
    $expected = ' OG ';
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');

    // Test Danish - OR
    $result = ting_openformat_get_cql_commando('OR');
    $expected = ' ELLER ';
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');

    // Test Danish - NON Valid
    $result = ting_openformat_get_cql_commando('FAIL');
    $expected = NULL;
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');


    $language = $saved_language;

  }  

  public function testBibdkCollection() {

    $manifestation = new stdClass();
    $manifestation->acessType->{'$'} = 'physical';
    $manifestation->fedoraPid->{'$'} = '870970-basis:27295150';
    $manifestation->identifier->{'$'} = '870970-basis:27295150';
    $manifestation->language->{'$'} = 'Flere sprog';
    $manifestation->title->{'$'} = 'First choice for sjette';
    $manifestation->dependentTitle->{'$'} = 'Teacher\'s book';
    $manifestation->type->{'$'} = 'Bog';
    $manifestation->workType->{'$'} = 'book';

    $manifestations = array(
      'manifestations' => array($manifestation),
      'workOne' => new stdClass(),
    );


    $collection = new BibdkCollection($manifestations);

    $result = $collection->getTitle();
    $expected_result = 'First choice for sjette <br /> Teacher\'s book<span> (Flere sprog)</span>';
    $this->assertEqual($result, $expected_result, 'Title parsed correctly');

    $result = $collection->getType();
    $expected_result = 'Bog';
    $this->assertEqual($result, $expected_result, 'Type parsed correctly');

    $result = $collection->getWorkType();
    $expected_result = 'book';
    $this->assertEqual($result, $expected_result, 'Worktype parsed correctly');

    $result = $collection->getWorkOne();
    $this->assertTrue(is_object($result), 'workOne parsed correctly');

    $manifestations = array();
    $collection = new BibdkCollection($manifestations);
    $result = $collection->getTitle();
    $expected_result = NULL;
    $this->assertEqual($result, $expected_result, 'Title parsed correctly');

    $result = $collection->getType();
    $expected_result = NULL;
    $this->assertEqual($result, $expected_result, 'Type parsed correctly');

    $result = $collection->getWorkType();
    $expected_result = NULL;
    $this->assertEqual($result, $expected_result, 'Worktype parsed correctly');

    $result = $collection->getWorkOne();
    $expected_result = NULL;
    $this->assertEqual($result, $expected_result, 'Empty workOne parsed correctly');
  }

  private function _createObjects() {
    module_load_include('module', 'ting_openformat', 'ting_openformat');
    module_load_include('inc', 'ting_openformat', 'lib/Manifestation');
    $file = file_get_contents(drupal_get_path("module", "ting_openformat") . "/test/mockup/manifestation.working.json");
    $result = json_decode($file);

    $manifestation_object = $result->searchResponse->result->searchResult[0]->formattedCollection->workDisplay->manifestation;
    return new Manifestation($manifestation_object);
  }

  public function testGetAccessInformationExtended(){
    debug('Testing manifestation with single URL');
    $singleUrlManifestation = unserialize(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/serialized/singleUrl.serialized'));

    $info = $singleUrlManifestation->getAccessInformation();

    $this->assertTrue(is_array($info), 'Got array');
    $this->assertTrue(isset($info['accessInformation'][0]['accessUrl']), 'Got array formatted as expected');
    $this->assertEqual(count($info['accessInformation'][0]['accessUrl']), 1, 'Got array count of 1 as expected');

    debug('Testing manifestation with multiple URLs');
    $multipleUrlManifestation = unserialize(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/serialized/multipleUrl.serialized'));

    $info = $multipleUrlManifestation->getAccessInformation();

    $this->assertTrue(is_array($info), 'Got array');
    $this->assertTrue(isset($info['accessInformation'][0]['accessUrl']), 'Got array formatted as expected');
    $this->assertEqual(count($info['accessInformation'][0]['accessUrl']), 3, 'Got array count of 3 as expected');

  }
}
