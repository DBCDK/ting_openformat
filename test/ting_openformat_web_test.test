<?php

/**
 * WebTest class for ting_openformat module
 */
class TingOpenFormatWebTestCase extends DrupalWebTestCase {

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Ting OpenFormat Webtest'),
      'description' => t('Tests methods in ting_openformat module that requires database access'),
      'group' => t('Ting Openformat'),
    );
  }

  public function setUp() {
    parent::setUp('ting_openformat');
    variable_set('ting_search_url', 'http://lakiseks.dbc.dk/openbibdk/0.5/');
    variable_set('bibdk_provider_security_code', 'testhest');
    variable_set('search_active_modules', array('ting_openformat' => 'ting_openformat'));
    variable_set('search_default_module', 'ting_openformat');
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'search content'));
    menu_rebuild();
  }

  public function testRunner() {
    $this->_testFields();
    $this->_testFieldContent();
    $this->_testMethodGetMarkupForField();
    $this->_testMethodParseElement();
    $this->_testEmptySearch();
    $this->_testHookActions();
    $this->_test_ting_openformat_parse_urls();
  }


  private function _testHookActions() {
    debug(__FUNCTION__);
    $actions = ting_openformat_get_actions('test', new stdClass(), null, null);
    $this->assertEqual($actions, array(), t('no actions added'));

    module_enable(array('ting_openformat_webservice_mockup'));
    $actions = ting_openformat_get_actions('test', new stdClass(), null, null);
    $expected_result = array(
      'test1' =>
      array(
        '#markup' => 'this_is_an_action_1',
        '#weight' => 1,
      ),
      'test2' =>
      array(
        '#markup' => 'this_is_an_action_2',
        '#weight' => 2,
      ),
    );

    $this->assertEqual($actions, $expected_result, t('actions correctly added'));
  }

  private function _testEmptySearch() {
    debug(__FUNCTION__);
    $this->drupalPost('', NULL, t('Search'));
    $this->assertNoText('Error: No query found in request');
    $this->assertText('Please enter some keywords.');
  }

  /**
   * Testing the _ting_openformat_get_markup_for_field() method
   */
  private function _testMethodGetMarkupForField() {
    debug('Testing _ting_openformat_get_markup_for_field():');
    //loading the element to parse
    $element = drupal_json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/element.json'));
    //ensuring that a link by default is returned as part of the value of the #markup key
    $response = _ting_openformat_get_markup_for_field($element);
    
    $this->assertTrue(array_key_exists('#theme', $response[0]), t('\'#theme\' present in response from _ting_openformat_get_markup_for_field()'));
    $this->assertTrue(array_key_exists('#openformat_field', $response[0]), t('\'#openformat_field\' present in response from _ting_openformat_get_markup_for_field()'));
    $result = ($response[0]['#theme'] == 'ting_openformat_field');
    $this->assertTrue($result, t('\'#theme\' is "ting_openformat_field" in response from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response[0]['#openformat_field']['#path'], 'search/work/');
    $this->assertTrue($result, t('url path correctly received'));
    $result = strstr($response[0]['#openformat_field']['#options']['query']['search_block_form'], 'phrase.creator="Joanne K. Rowling"');
    $this->assertTrue($result, t('url query correctly received'));

    //ensuring that no link is returned when requested not to return href
    $response = _ting_openformat_get_markup_for_field($element, ', ', TRUE, FALSE);
    $this->assertTrue(array_key_exists('#theme', $response[0]), t('\'#theme\' present in response from _ting_openformat_get_markup_for_field()'));
    $this->assertTrue(array_key_exists('#markup', $response[0]['#openformat_field']), t('\'#markup\' present in response from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response[0]['#openformat_field']['#markup'], 'search/work/phrase.creator="Joanne K. Rowling"');
    $this->assertFalse($result, t('No href received'));
  }

  /**
   * Testing the _ting_openformat_parse_element() method
   * Pretty much the same as the above test
   */
  private function _testMethodParseElement() {
    debug('Testing _ting_openformat_parse_element()');
    //loading the element to parse
    $element = drupal_json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/element.json'));

    //ensuring that a link by default is returned as part of the value of the #markup key
    $response = _ting_openformat_parse_element($element);
    $this->assertTrue(array_key_exists('#theme', $response[0]), t('\'#theme\' present in response from _ting_openformat_get_markup_for_field()'));
    $this->assertTrue(array_key_exists('#openformat_field', $response[0]), t('\'#openformat_field\' present in response from _ting_openformat_get_markup_for_field()'));
    $result = ($response[0]['#theme'] == 'ting_openformat_field');
    $this->assertTrue($result, t('\'#theme\' is "ting_openformat_field" in response from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response[0]['#openformat_field']['#path'], 'search/work/');
    $this->assertTrue($result, t('url path part correctly received'));
    $result = strstr($response[0]['#openformat_field']['#options']['query']['search_block_form'], 'phrase.creator="Joanne K. Rowling"');
    $this->assertTrue($result, t('url query part correctly received'));

    //ensuring that no link is returned when requested not to return href
    $response = _ting_openformat_parse_element($element, array(), ', ', TRUE, FALSE);
    $this->assertTrue(array_key_exists('#theme', $response[0]), t('\'#theme\' present in response from _ting_openformat_get_markup_for_field()'));
    $this->assertTrue(array_key_exists('#markup', $response[0]['#openformat_field']), t('\'#markup\' present in response from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response[0]['#openformat_field']['#markup'], 'search/work/');
    $this->assertFalse($result, t('No href received'));

  }


  /** Test if fields are created
   */
  private function _testFields() {
    debug(__FUNCTION__);
    // Login as admin user
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    $this->drupalLogin($admin);
    $this->drupalGet('admin/structure/manifestations');

    // Check if field is present
    $this->assertText('bibdk_mani_analytic_content', t('Analytic content field created'));
  }

  /**
   * Test if field content is generated
   */
  private function _testFieldContent() {
    debug(__FUNCTION__);
    // Get a manifestation entity with content
    $manifestation = $this->_createObjects();
    $view = ting_openformat_manifestation_view($manifestation);
    $html = drupal_render($view);


    // Test if Analytic content i present in html
    $this->assertTrue(strpos($html, 'Giuseppe Verdi') !== FALSE, t('Found first part of analytic content'));
    $this->assertTrue(strpos($html, 'Rigoletto (uddrag)') !== FALSE, t('Found second part of analytic content'));
    $this->assertTrue(strpos($html, '/ Jussi BjÃ¶rling, tenor ; Leonard Warren, baryton ; orkester ; dirigent: Cesare Sordero') !== FALSE, t('Found third part of analytic content'));
  }

  /**
   * Testing method _ting_openformat_parse_urls() specifically
   * @see ting_openformat.field.inc
   */
  private function _test_ting_openformat_parse_urls(){
    debug(__FUNCTION__);
    $urls = json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/urls_objects.json'), TRUE);

    $singleUrl = $urls['singleUrl'];
    $rawUrl = $singleUrl['accessInformation'][0]['accessUrl'][0];
    $expectedFregment = 'href="' . $rawUrl . '"';

    $link = _ting_openformat_parse_urls($singleUrl);
    $this->assertTrue(strpos($link, $expectedFregment) !== FALSE, 'Found expected fragment');

    $multipleUrls = $urls['multipleUrls'];
    $links = _ting_openformat_parse_urls($multipleUrls);

    $count = 0;
    foreach ($multipleUrls['accessInformation'][0]['accessUrl'] as $rawUrl) {
      $expectedFregment = 'href="' . $rawUrl . '"';
      $found = strpos($links, $expectedFregment) !== FALSE;
      $this->assertTrue($found, 'Multiple URL\'s Found expected fragment');
      if($found){
        $count++;
      }
    }

    $this->assertEqual($count, 3, t('Found three URL-fragments as expected. Found %count', array('%count' => $count)));
  }


  private function _createObjects() {
    $file = file_get_contents(drupal_get_path("module", "ting_openformat") . "/test/mockup/manifestation.working.json");
    $result = json_decode($file);

    $manifestation_object = $result->searchResponse->result->searchResult[0]->formattedCollection->workDisplay->manifestation;
    return entity_load('bibdkManifestation', $manifestation_object->adminData->pid->{'$'}, $manifestation_object);
  }

}
