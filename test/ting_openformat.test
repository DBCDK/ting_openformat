<?php

/**
 * Test class for ting_openformat
 */
class TingOpenFormatUnitTestCase extends DrupalUnitTestCase {

  private $manifestation;

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Unittest'),
      'description' => t('Tests the methods of the different entities'),
      'group' => t('Ting Openformat'),
    );
  }

  public function setUp() {
    $this->_createObjects();
    parent::setUp();
  }


  public function testManifestationMethods() {
    $this->_testGetmethods("getSubType", "Grammofonplade");
    $this->_testGetmethods("getOriginalTitle", NULL);
    $result = $this->_testGetmethods("getAnalyticContent", array (
      'analyticContent' =>
      array (
        0 =>
        array (
          'analyticContributor' =>
          array (
            0 =>
            array (
              0 =>
              array (
                'searchCode' => 'phrase.creator="Giuseppe Verdi"',
                'display' => 'Giuseppe Verdi',
              ),
            ),
          ),
          'analyticTitle' =>
          array (
            0 =>
            array (
              'analyticTitleMain' =>
              array (
                0 =>
                array (
                  0 =>
                  array (
                    'searchCode' => 'dkcclphrase.lti="Rigoletto uddrag"',
                    'display' => 'Rigoletto (uddrag)',
                  ),
                ),
              ),
              'analyticRestOfTitle' => '/ Jussi Björling, tenor ; Leonard Warren, baryton ; orkester ; dirigent: Cesare Sordero',
            ),
          ),
        ),
      ),
    ));
  }

  /**
   * @param $method
   * @param $expected_result
   */
  private function _testGetmethods($method, $expected_result) {
    $manifestation = $this->manifestation;
    $serial_result = $result = $manifestation->$method();
    $message = "$method method returned : " . print_r($result, TRUE) . " Should be " . print_r($expected_result, TRUE);
    if (is_array($expected_result)) {
      $expected_result = serialize($expected_result);
      $serial_result = serialize($result);
    }

    $this->assertEqual($expected_result, $serial_result, $message);
    return $result;

  }

  private function _createObjects() {
    $file = file_get_contents(drupal_get_path("module", "ting_openformat") . "/test/mockup/manifestation.working.json");
    $result = json_decode($file);

    $manifestation_object = $result->searchResponse->result->searchResult[0]->formattedCollection->workDisplay->manifestation;
    $this->manifestation = entity_load('bibdkManifestation', $manifestation_object->adminData->pid->{'$'}, $manifestation_object);
  }





}

/**
 * WebTest class for ting_openformat module
 */
class TingOpenFormatWebTestCase extends DrupalWebTestCase {

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Webtest'),
      'description' => t('Tests methods in ting_openformat module that requires database access'),
      'group' => t('Ting Openformat'),
    );
  }

  public function setUp(){
    parent::setUp(array('ting_openformat'));
  }

  /**
   * Testing the _ting_openformat_get_markup_for_field() method
   */
  private function _testMethodGetMarkupForField() {
    debug('Testing _ting_openformat_get_markup_for_field():');
    //loading the element to parse
    $element = drupal_json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/element.json'));

    //ensuring that a link by default is returned as part of the value of the #markup key
    $response = _ting_openformat_get_markup_for_field($element);
    $this->assertTrue(array_key_exists('#markup', $response), t('\'#markup\' present in respone from _ting_openformat_get_markup_for_field()'));

    $result = strstr($response['#markup'], 'search/work/phrase.creator%3D%22Joanne%20K.%20Rowling%22');
    $this->assertNotEqual($result, FALSE, t('href correctly received'));

    //ensuring that no link is returned when requested not to return href
    $response = _ting_openformat_get_markup_for_field($element, ', ', TRUE, FALSE);
    $this->assertTrue(array_key_exists('#markup', $response), t('\'#markup\' present in respone from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response['#markup'], 'phrase.creator%3D%22Joanne%20K.%20Rowling%22');
    $this->assertFalse($result, t('No href received'));
  }

  /**
   * Testing the _ting_openformat_parse_element() method
   * Pretty much the same as the above test except no '#markup' key
   */
  private function _testMethodPparseElement() {
    debug('Testing _ting_openformat_parse_element()');
    //loading the element to parse
    $element = drupal_json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/element.json'));

    //ensuring that a link by default is returned as part of the value of the #markup key
    $response = _ting_openformat_parse_element($element);
    $this->assertTrue(strstr($response, 'phrase.creator%3D%22Joanne%20K.%20Rowling%22'), t('href correctly received'));

    //ensuring that no link is returned when requested not to return href
    $response = _ting_openformat_parse_element($element, ', ', TRUE, FALSE);
    $result = strstr($response, 'phrase.creator%3D%22Joanne%20K.%20Rowling%22');
    $this->assertFalse($result, t('No href received'));
  }


  public function testRunner(){
    $this->_testFields();
    $this->_testFieldContent();
    $this->_testMethodGetMarkupForField();
    $this->_testMethodPparseElement();
  }

  /** Test if fields are created
  */
  private function _testFields(){
    // Login as admin user
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    $this->drupalLogin($admin);
    $this->drupalGet('admin/structure/manifestations');

    // Check if field is present
    $this->assertText('bibdk_mani_analytic_content', t('Analytic content field created'));
  }

  /**
   * Test if field content is generated
   */
  private function _testFieldContent(){
    // Get a manifestation entity with content
    $manifestation = $this->_createObjects();
    $view = ting_openformat_manifestation_view($manifestation);
    $html = drupal_render($view);


    // Test if Analytic content i present in html
    $this->assertTrue(strpos($html, 'Giuseppe Verdi') !== FALSE, t('Found first part of analytic content'));
    $this->assertTrue(strpos($html, 'Rigoletto (uddrag)') !== FALSE, t('Found second part of analytic content') );
    $this->assertTrue(strpos($html, '/ Jussi Björling, tenor ; Leonard Warren, baryton ; orkester ; dirigent: Cesare Sordero') !== FALSE, t('Found third part of analytic content'));
  }


  private function _createObjects() {
    $file = file_get_contents(drupal_get_path("module", "ting_openformat") . "/test/mockup/manifestation.working.json");
    $result = json_decode($file);

    $manifestation_object = $result->searchResponse->result->searchResult[0]->formattedCollection->workDisplay->manifestation;
    return entity_load('bibdkManifestation', $manifestation_object->adminData->pid->{'$'}, $manifestation_object);
  }

}


