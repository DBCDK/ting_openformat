<?php

/**
 * Test class for ting_openformat
 */
class TingOpenFormatUnitTestCase extends DrupalUnitTestCase {

  private $manifestation;

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Unittest'),
      'description' => t('Tests the methods of the different entities'),
      'group' => t('Ting Openformat'),
    );
  }

  public function setUp() {
    $this->_createObjects();
    parent::setUp();
  }


  public function testManifistationMethods() {
    $this->_testSimplefunction("getSubType", "Bog");
    $this->_testSimplefunction("getOriginalTitle", NULL);
  }

  /**
   * @param $method
   * @param $expected_result
   */
  private function _testSimplefunction($method, $expected_result) {
    $manifestation = $this->manifestation;
    $result = $manifestation->$method();
    $message = "$method method returned : " . print_r($result, TRUE) . " Should be " . print_r($expected_result, TRUE);
    if (is_array($expected_result)) {
      $expected_result = serialize($expected_result);
      $result = serialize($result);
    }

    $this->assertEqual($expected_result, $result, $message);

  }

  private function _createObjects() {
    $file = file_get_contents(drupal_get_path("module", "ting_openformat") . "/test/mockup/manifestation.working.json");
    $result = json_decode($file);

    $manifestation_object = $result->searchResponse->result->searchResult[0]->formattedCollection->workDisplay->manifestation;
    $this->manifestation = entity_load('bibdkManifestation', $manifestation_object->adminData->pid->{'$'}, $manifestation_object);
  }

}

/**
 * WebTest class for ting_openformat module
 */
class TingOpenFormatWebTestCase extends DrupalWebTestCase {

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Webtest'),
      'description' => t('Tests methods in ting_openformat module that requires database access'),
      'group' => t('Ting Openformat'),
    );
  }

  public function setUp(){
    parent::setUp();
  }

  /**
   * Testing the _ting_openformat_get_markup_for_field() method
   */
  public function testMethodGetMarkupForField() {
    debug('Testing _ting_openformat_get_markup_for_field():');
    //loading the element to parse
    $element = drupal_json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/element.json'));

    //ensuring that a link by default is returned as part of the value of the #markup key
    $response = _ting_openformat_get_markup_for_field($element);
    $this->assertTrue(array_key_exists('#markup', $response), t('\'#markup\' present in respone from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response['#markup'], '<a href="/bibdk_pg/search/work/');
    $this->assertNotEqual($result, FALSE, t('href correctly received'));

    //ensuring that no link is returned when requested not to return href
    $response = _ting_openformat_get_markup_for_field($element, ', ', TRUE, FALSE);
    $this->assertTrue(array_key_exists('#markup', $response), t('\'#markup\' present in respone from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response['#markup'], '<a href="/bibdk_pg/search/work/');
    $this->assertFalse($result, t('No href received'));
  }

  /**
   * Testing the _ting_openformat_parse_element() method
   * Pretty much the same as the above test except no '#markup' key
   */
  public function testMethodPparseElement() {
    debug('Testing _ting_openformat_parse_element()');
    //loading the element to parse
    $element = drupal_json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/element.json'));

    //ensuring that a link by default is returned as part of the value of the #markup key
    $response = _ting_openformat_parse_element($element);
    $this->assertTrue(strstr($response, '<a href="/bibdk_pg/search/work/'), t('href correctly received'));

    //ensuring that no link is returned when requested not to return href
    $response = _ting_openformat_parse_element($element, ', ', TRUE, FALSE);
    $result = strstr($response, '<a href="/bibdk_pg/search/work/');
    $this->assertFalse($result, t('No href received'));
  }
}


