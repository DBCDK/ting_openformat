<?php

/**
 * Test class for ting_openformat
 */
class TingOpenFormatUnitTestCase extends DrupalUnitTestCase {

  private $manifestation;
  private $fields;

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Unittest'),
      'description' => t('Tests the methods of the different entities'),
      'group' => t('Ting Openformat'),
    );
  }

  public function setUp() {
    $this->_createObjects();
    $this->fields = ting_openformat_bibdk_fields();
    parent::setUp();
  }

  public function testManifestationMethods() {

    $fields = $this->fields;

    // test_results.php includes expected results for all fields in the variable $_ting_openformat_test_results
    include_once 'test_results.php';

    foreach ($fields as $field_name => $field) {
      $method = $_ting_openformat_test_results[$field_name]['method'];
      $expected = $_ting_openformat_test_results[$field_name]['_ting_openformat_default_field_view_content'];
      $message = "method '$method' returns correct result";
      $this->_testGetmethods($method, $expected, $message);
    }
  }

  public function testCqlCommando() {

    global $language;

    $saved_language = $language;

    $language->language = 'en';

    // Test English - AND
    $result = ting_openformat_get_cql_commando('AND');
    $expected = ' AND ';
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');

    // Test English - OR
    $result = ting_openformat_get_cql_commando('OR');
    $expected = ' OR ';
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');

    // Test English - NON VALID
    $result = ting_openformat_get_cql_commando('FAIL');
    $expected = NULL;
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');


    $language->language = 'da';

    // Test Danish - AND
    $result = ting_openformat_get_cql_commando('AND');
    $expected = ' OG ';
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');

    // Test Danish - OR
    $result = ting_openformat_get_cql_commando('OR');
    $expected = ' ELLER ';
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');

    // Test Danish - NON Valid
    $result = ting_openformat_get_cql_commando('FAIL');
    $expected = NULL;
    $this->assertEqual($result, $expected, 'CQL Commando correcty translated');


    $language = $saved_language;

  }

  /**
   * @param $method
   * @param $expected_result
   */
  private function _testGetmethods($method, $expected_result, $message) {
    $manifestation = $this->manifestation;
    $serial_result = $result = $manifestation->$method();
    //$message = "$method method returned : " . print_r($result, TRUE) . " Should be " . print_r($expected_result, TRUE);
    if (is_array($expected_result)) {
      $expected_result = serialize($expected_result);
      $serial_result = serialize($result);
    }

    $this->assertEqual($expected_result, $serial_result, $message);

    return $result;

  }

  private function _createObjects() {
    $file = file_get_contents(drupal_get_path("module", "ting_openformat") . "/test/mockup/manifestation.working.json");
    $result = json_decode($file);

    $manifestation_object = $result->searchResponse->result->searchResult[0]->formattedCollection->workDisplay->manifestation;
    $this->manifestation = entity_load('bibdkManifestation', $manifestation_object->adminData->pid->{'$'}, $manifestation_object);
  }

}


/**
 * WebTest class for ting_openformat module
 */
class TingOpenFormatWebTestCase extends DrupalWebTestCase {

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Webtest'),
      'description' => t('Tests methods in ting_openformat module that requires database access'),
      'group' => t('Ting Openformat'),
    );
  }

  public function setUp() {
    parent::setUp('ting_openformat');
    variable_set('ting_search_url', 'http://lakiseks.dbc.dk/openbibdk/0.5/');
    variable_set('bibdk_provider_security_code', 'testhest');
    variable_set('search_active_modules', array('ting_openformat' => 'ting_openformat'));
    variable_set('search_default_module', 'ting_openformat');
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'search content'));
    menu_rebuild();
  }

  public function testRunner() {
    $this->_testFields();
    $this->_testFieldContent();
    $this->_testMethodGetMarkupForField();
    $this->_testMethodParseElement();
    $this->_testSearchDefaultVariables();
    $this->_testEmptySearch();
    $this->_testHookActions();
    $this->_testDefaultFieldRendering();
  }


  private function _testHookActions() {
    debug(__FUNCTION__);
    $actions = ting_openformat_get_actions('test', new stdClass(), null, null);
    $this->assertEqual($actions, array(), t('no actions added'));

    module_enable(array('ting_openformat_webservice_mockup'));
    $actions = ting_openformat_get_actions('test', new stdClass(), null, null);
    $expected_result = array(
      'test1' =>
      array(
        '#markup' => 'this_is_an_action_1',
        '#weight' => 1,
      ),
      'test2' =>
      array(
        '#markup' => 'this_is_an_action_2',
        '#weight' => 2,
      ),
    );

    $this->assertEqual($actions, $expected_result, t('actions correctly added'));
  }

  private function _testEmptySearch() {
    debug(__FUNCTION__);
    $this->drupalPost('', NULL, t('Search'));
    $this->assertNoText('Error: No query found in request');
    $this->assertText('Please enter some keywords.');
  }

  /**
   * Testing the _ting_openformat_get_markup_for_field() method
   */
  private function _testMethodGetMarkupForField() {
    debug('Testing _ting_openformat_get_markup_for_field():');
    //loading the element to parse
    $element = drupal_json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/element.json'));

    //ensuring that a link by default is returned as part of the value of the #markup key
    $response = _ting_openformat_get_markup_for_field($element);
    $this->assertTrue(array_key_exists('#markup', $response), t('\'#markup\' present in respone from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response['#markup'], 'search/work/phrase.creator%3D%22Joanne%20K.%20Rowling%22">Joanne K. Rowling</a>');
    $this->assertTrue($result, t('href correctly received'));

    //ensuring that no link is returned when requested not to return href
    $response = _ting_openformat_get_markup_for_field($element, ', ', TRUE, FALSE);
    $this->assertTrue(array_key_exists('#markup', $response), t('\'#markup\' present in respone from _ting_openformat_get_markup_for_field()'));
    $result = strstr($response['#markup'], 'search/work/phrase.creator%3D%22Joanne%20K.%20Rowling%22">Joanne K. Rowling</a>');
    $this->assertFalse($result, t('No href received'));
  }

  /**
   * Testing the _ting_openformat_parse_element() method
   * Pretty much the same as the above test except no '#markup' key
   */
  private function _testMethodParseElement() {
    debug('Testing _ting_openformat_parse_element()');
    //loading the element to parse
    $element = drupal_json_decode(file_get_contents(drupal_get_path('module', 'ting_openformat') . '/test/mockup/element.json'));

    //ensuring that a link by default is returned as part of the value of the #markup key
    $response = _ting_openformat_parse_element($element);
    $this->assertTrue(strstr($response, 'search/work/phrase.creator%3D%22Joanne%20K.%20Rowling%22">Joanne K. Rowling</a>'), t('href correctly received'));

    //ensuring that no link is returned when requested not to return href
    $response = _ting_openformat_parse_element($element, ', ', TRUE, FALSE);

    $result = strstr($response, 'search/work/phrase.creator%3D%22Joanne%20K.%20Rowling%22">Joanne K. Rowling</a>');
    $this->assertFalse($result, t('No href received'));

  }

  private function _testSearchDefaultVariables() {
    debug('Test method: _ting_openformat_search_get_variables()');
    global $language;

    $language_reset = $language;


    // Test query language for with danish language

    $language->language = 'da';
    $variables = _ting_openformat_search_get_variables();

    $result = $variables['queryLanguage'];
    $language = $language_reset;
    $this->assertEqual($result, 'cqldan', 'querylanguage is set to cqldan');


    // Test query language for non - danish language
    $language->language = 'en';
    $variables = _ting_openformat_search_get_variables();

    $result = $variables['queryLanguage'];
    $language = $language_reset;
    $this->assertEqual($result, 'cqleng', 'querylanguage is set to cqleng');
  }


  /** Test if fields are created
   */
  private function _testFields() {
    debug(__FUNCTION__);
    // Login as admin user
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    $this->drupalLogin($admin);
    $this->drupalGet('admin/structure/manifestations');

    // Check if field is present
    $this->assertText('bibdk_mani_analytic_content', t('Analytic content field created'));
  }

  /**
   * Test if field content is generated
   */
  private function _testFieldContent() {
    debug(__FUNCTION__);
    // Get a manifestation entity with content
    $manifestation = $this->_createObjects();
    $view = ting_openformat_manifestation_view($manifestation);
    $html = drupal_render($view);


    // Test if Analytic content i present in html
    $this->assertTrue(strpos($html, 'Giuseppe Verdi') !== FALSE, t('Found first part of analytic content'));
    $this->assertTrue(strpos($html, 'Rigoletto (uddrag)') !== FALSE, t('Found second part of analytic content'));
    $this->assertTrue(strpos($html, '/ Jussi Bj√∂rling, tenor ; Leonard Warren, baryton ; orkester ; dirigent: Cesare Sordero') !== FALSE, t('Found third part of analytic content'));
  }


  private function _testDefaultFieldRendering() {

    $manifestation = $this->_createObjects();
    $fields = ting_openformat_bibdk_fields();

    // test_results.php includes expected results for all fields in the variable $_ting_openformat_test_results    include_once 'test_results.php';

    foreach ($fields as $field_name => $field) {

      // Test _ting_openformat_default_field_view_content
      $result = _ting_openformat_default_field_view_content($field_name, $manifestation);
      $expected = $_ting_openformat_test_results[$field_name]['_ting_openformat_default_field_view_content'];
      $this->assertEqual($result, $expected, format_string('field "@field" correctly parsed by _ting_openformat_default_field_view_content', array(
        '@field' => $field_name,
      )));

      // Test _ting_openformat_parse_element
      $result = _ting_openformat_parse_element($result);
      $expected = $_ting_openformat_test_results[$field_name]['_ting_openformat_parse_element'];
      $expected = str_replace('[base_path]', base_path(), $expected);
      $this->assertEqual($result, $expected, format_string('field "@field" correctly parsed by _ting_openformat_parse_element', array(
        '@field' => $field_name,
      )));

    }

  }


  private function _createObjects() {
    $file = file_get_contents(drupal_get_path("module", "ting_openformat") . "/test/mockup/manifestation.working.json");
    $result = json_decode($file);

    $manifestation_object = $result->searchResponse->result->searchResult[0]->formattedCollection->workDisplay->manifestation;
    return entity_load('bibdkManifestation', $manifestation_object->adminData->pid->{'$'}, $manifestation_object);
  }

}


