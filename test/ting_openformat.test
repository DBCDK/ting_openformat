<?php


class TingOpenFormatUnitTestCase extends DrupalUnitTestCase {
  
  public static function getInfo() {
    return array (
      'name' => t('Unittest'),
      'description' => t('Tests the methods of the different entities'),
      'group' => t('Ting Openformat'),
    );
     }
  
  public function setUp() {
    $this->_createObjects();
    
    parent::setUp();
  }
  
  
  public function testManifistationMethods (){
      
  /* @var $manifestation manifestation */
    //$manifestation = $this->manifestation;
    
    $this->_testSimplefunction("getType", "Bog");
    $this->_testSimplefunction("getOriginalTitle", NULL);
    $this->_testSimplefunction("getAlternativeTitle", array("alternativeTitle" => array(
        "header" => "Cd:",
        "alternativeTitleElement"=> "Harry Potter instrumental solos alto saxophone - level 2-3",
    )));    
  }
  
  private function _testSimplefunction($method, $expected_result){
    $manifestation = $this->manifestation;
    $result = $manifestation->$method();
    $message = "$method method returned : ".print_r($result, true)." Should be ".print_r($expected_result, TRUE);
    if (is_array($expected_result)){
      $expected_result = serialize ($expected_result);
      $result = serialize($result);
    }

    $this->assertEqual($expected_result, $result, $message);
    
  } 
  
  private function testReservationFunctions () {
     /*
      * FÃ¸lgende skal nok skrottes
      * $file = file_get_contents(drupal_get_path("module", "bibdk_reservation")."/tests/manifestation-link.json");
     $result = json_decode($file);

     $this->none = entity_load('bibdkManifestation', 'test1', $result->manifestation);
    $result = $this->none->isReservable();
    $message = "No Button is created";
    $this->assertEqual(NULL, $result, $message);
    
    $result = $this->link->isReservable();
    $message = "No Button is created";
    $this->assertEqual(NULL, $result, $message);
    
    $result = $this->button->isReservable();
    $message = "No Button is created";
    $this->assertEqual(TRUE, $result, $message);
   
    $result = $this->link->isLink();
    $message = "Button is a link";
    $this->assertEqual(TRUE, $result, $message);
   
    $result = $this->text->getInfotext();
    $message = "Button is a link";
    $this->assertEqual("linkE17", $result, $message);*/
  }
  
  private function _createObjects(){
     $file = file_get_contents(drupal_get_path("module", "ting_openformat")."/test/manifestation.working.json");
     $result = json_decode($file);
    $manifestation_object = $result->searchResponse->result->searchResult[0]->formattedCollection->workDisplay->manifestation;
    
    $this->manifestation = entity_load('bibdkManifestation', $manifestation_object->adminData->pid->{'$'}, $manifestation_object);
   
  }
  
  private $manifestation;
  private $work, $subwork;
}

class TingOpenFormatWebTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array (
      'name' => t('Webtest'),
      'description' => t('Test the search and display of bibdk objects'),
      'group' => t('Ting Openformat'),
    );
     }
  
 public function setUp() {
    //$this->profile = 'bibdk';
    //array('ting_openformat', 'ting_openformat_webservice_mockup','ting', 'devel', 'search', 'ting_client')
    parent::setup(array('ting_openformat','ting', 'search', 'ting_client'));
    global $base_url;
    $this->privileged_user = $this->drupalCreateUser(array_keys(module_invoke_all('permission')));
    $this->drupalLogin($this->privileged_user);
    variable_set('agency_search_url', 'http://guesstimate.dbc.dk/~fvs/OpenLibrary/OpenAgency/trunk/'); 
    variable_set('bibdk_borchk_url', $base_url.'/bibdk_borchk_webservice/'); 
    variable_set('bibdk_borchk_servicerequester', 'bibliotek.dk');
    variable_set('bibdk_openorder_url', 'http://guesstimate.dbc.dk/~fvs/OpenLibrary/OpenOrder/trunk/server.php/');
    variable_set('ting_agency', '100200');
    variable_set('ting_search_url', 'http://lakiseks.dbc.dk/hive/'); 
    variable_set('ting_search_url', 'http://lakiseks.dbc.dk/hive/'); 
    variable_set('search_default_module', 'ting_openformat'); 
    variable_set('search_active_modules', array('node', 'ting_openformat')); 
    variable_set('ting_agency', '100200'); 
    variable_set('ting_search_profile', 'test'); 
    variable_set('ting_search_openformat', 'bibliotekdkWorkDisplay'); 
  }
  
  
  public function testDisplayOfSearchResult() {
   $this->drupalPost("", array('search_block_form' => 'harry potter'), "Search"); 
   //$this->drupalPost(NULL, array('search_block_form' => 'harry potter'), "Search"); 
   $this->drupalPost("search/work/", array('search_block_form' => 'harry potter'), "Search");
   $this->drupalGet("dsfkgjhdfgkjdh");
  }
  
/*  public function testDisplayOfSingleWork() {
    
  }
 */ 
}